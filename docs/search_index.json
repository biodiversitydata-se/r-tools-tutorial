[["index.html", "Using R tools for analysis of primary biodiversity data provided by SBDI Introduction R and Mirroreum SBDI4R - an R  to search an access data Other packages needed Your collaboration is appreciated", " Using R tools for analysis of primary biodiversity data provided by SBDI Debora Arlt and Alejandro Ruete for the Swedish Biodiversity Data Infrastructure 2021-05-31 Introduction Biodiversity resources are increasingly international. The SBDI has made an effort to canalize biodiversity data and resources to help the research community access and analyze Swedish primary biodiversity data. Each research question draws its own challenges which are unique in themselves. Our aim here is to provide a few examples that prompt questions that may be asked at different stages of the process. The validity and appropriateness of a particular method depends on the individual researcher(s). For a comprehensive workflow on how to treat and analyze PBD please refer to our tutorial on biodiversity analysis tool where we go through the complete workflow Data &gt; Cleaning &gt; Fitness evaluation &gt; Analysis R and Mirroreum The present tutorial is focused on the statistical programming language R. R is a free software environment for statistical computing and graphics that is widely used within the scientific community and where the complete analysis workflow can be documented in a fully reproducible way. At SBDI we provide access for researchers and students to Mirroreum  an online web-based environment for Reproducible Open Research in the area of biodiversity analysis. Mirroreum is based on a Free and Open Source stack of software. Logging in, you immediately get access to a web-based version of R Studio with a large number of pre-installed packages such as all the packages offered from ROpenSci and more. Compared to running R Studio on your own machine, Mirroreum offers more computational resources and a standardized environment where you can rely on all the relevant packages being installed and the configuration parameters being set appropriately. To know more about Mirroreum or to request an account please visit the SBDI documentation site SBDI4R - an R  to search an access data The SBDI4R package enables the R community to directly access data and resources hosted by SBDI. The goal is to enable observations of species to be queried and output in a range of standard formats. It includes some filter functions that allow you to filter prior to download. It also includes some simple summary functions, and some function for some simple data exploration. The examples included in this tutorial also show you how you can continue exploring and analyzing using other R package. Please refer to the package documentation for details on how to install it. Once installed the SBDI4R package must be loaded for each new R session: ## Warning: package &#39;sp&#39; was built under R version 4.0.4 Customizing SBDI4R Various aspects of the SBDI4R package can be customized. Caching SBDI4R can cache most results to local files. This means that if the same code is run multiple times, the second and subsequent iterations will be faster. This will also reduce load on the web servers. By default, this caching is session-based, meaning that the local files are stored in a temporary directory that is automatically deleted when the R session is ended. This behaviour can be altered so that caching is permanent, by setting the caching directory to a non-temporary location. For example, under Windows, use something like: sbdi_config(cache_directory = file.path(&quot;c:&quot;,&quot;mydata&quot;,&quot;sbdi_cache&quot;)) ## Windows or for Linux: sbdi_config(cache_directory = &quot;~/mydata/sbdi_cache&quot;) ## Linux Note that this directory must exist (you need to create it yourself). All results will be stored in that cache directory and will be used from one session to the next. They wont be re-downloaded from the server unless the user specifically deletes those files or changes the caching setting to refresh. If you change the cache_directory to a permanent location, you may wish to add something like this to your .Rprofile file, so that it happens automatically each time the SBDI4R package is loaded: setHook(packageEvent(&quot;SBDI4R&quot;, &quot;onLoad&quot;), function(...) sbdi_config(cache_directory=file.path(&quot;~&quot;,&quot;mydata&quot;,&quot;sbdi_cache&quot;))) Caching can also be turned off entirely by: sbdi_config(caching=&quot;off&quot;) or set to refresh, meaning that the cached results will re-downloaded from the SBDI servers and the cache updated. (This will happen for as long as caching is set to refresh  so you may wish to switch back to normal on caching behavior once you have updated your cache with the data you are working on). E-mail address Each download request to SBDI servers is also accompanied by an e-mail address string that identifies the user making the request. You will need to provide an email address registered with the SBDI. You can create an account here. Once an email is registered with the SBDI, it should be stored in the config: sbdi_config(email=&quot;your.valid@emailaddress.com&quot;) Else you can provide this e-mail address as a parameter directly to each call of the function occurrences(). Setting the download reason SBDI requires that you provide a reason when downloading occurrence data (via the SBDI4R occurrences() function). You can provide this as a parameter directly to each call of occurrences(), or you can set it once per session using: sbdi_config(download_reason_id = &quot;your_reason_id&quot;) (See sbdi_reasons() for valid download reasons, e.g. * 3 for education, * 7 for ecological research, * 8 for systematic research/taxonomy, * 10 for testing) 0.0.0.1 Privacy NO other personal identification information is sent. You can see all configuration settings, including the the user-agent string that is being used, with the command: sbdi_config() Other options If you make a request that returns an empty result set (e.g. an un-matched name), by default you will simply get an empty data structure returned to you without any special notification. If you would like to be warned about empty result sets, you can use: sbdi_config(warn_on_empty=TRUE) Other packages needed Some additional packages are needed for these examples. Install them if necessary with the following script. to_install &lt;- c(&quot;BIRDS&quot;,&quot;colorRamps&quot;, &quot;cowplot&quot;,&quot;dplyr&quot;,&quot;ggplot2&quot;, &quot;leaflet&quot;, &quot;maps&quot;, &quot;mapdata&quot;, &quot;maptools&quot;, &quot;sf&quot;, &quot;sp&quot;, &quot;rgeos&quot;, &quot;tidyr&quot;, &quot;xts&quot;) to_install &lt;- to_install[!sapply(to_install, requireNamespace, quietly=TRUE)] if(length(to_install)&gt;0) install.packages(to_install, repos=&quot;http://cran.us.r-project.org&quot;) Your collaboration is appreciated Open Source also means that you can contribute. You dont need to know how to program but every input is appreciated. Did you find something that is not working? Have suggestions for examples or text? you can always Reach to us via the support center Submit and issue to the GitHub code repository see how Or contribute with your code or documents modifications by forking the code and submitting a pull request The repositories you can contribute to are: Mirroreum https://github.com/mskyttner/mirroreum SBDI4R https://github.com/biodiversitydata-se/SBDI4R (NOTE: we may not develop this package but instead move to a new one) the general analysis workflows https://github.com/biodiversitydata-se/biodiversity-analysis-tools these tutorial https://github.com/biodiversitydata-se/r-tools-tutorial "],["example-with-fish-data-from-sers.html", "1 Example with fish data from SERS 1.1 Plotting data on a map 1.2 Temporal summary 1.3 Species summary 1.4 Spatial biodiversity analysis", " 1 Example with fish data from SERS In this example we are interested in exploring data from a specific data resource  Swedish Electrofishing Registry - SERS (Institutionen f√∂r akvatiska resurser, SLU). This data base has 2.8 M observations starting in the 1950s. As you may already know, SBDI is a collection of many biodiversity databases. We start by searching for the data resource we are interested in using the function pick_filter(). This is an interactive query guiding you through the many resources available to filtering your query (data resources, spatial layers, and curated species lists). library(SBDI4R) fq_str &lt;- pick_filter(&quot;resource&quot;) # follow the instructions Follow the instruction. Your choices here would have been in3 &gt; dr10. Your variable fq_str will now contain a string data_resource_uid:dr10. But we are not interested in the complete database, but on the last 10 years of data. for this we concatenate (add to a vector) another filter string. These will be treated as AND factors. y1 &lt;- 2008 y2 &lt;- 2012 fq_str &lt;- c(fq_str, paste0(&quot;year:[&quot;, y1, &quot; TO &quot;, y2,&quot;]&quot;)) # Note the square brackets are hard limits For references on how to use the filters see SBDI APIS documentation. Using the function occurrences() we can the query for the observations fulfilling our filter. If you havent specified that in the sbdi_config() before, you need to pass your email and the download reason. xf &lt;- SBDI4R::occurrences(fq = fq_str, email = &quot;sbdi4r-test@biodiversitydata.se&quot;, download_reason_id = 10) # Remove what is not a species xf$data &lt;- xf$data[xf$data$rank %in% c(&quot;species&quot;, &quot;subspecies&quot;, &quot;variety&quot;, &quot;form&quot;, &quot;cultivar&quot;),] # Simply summarise all records by data source table(xf$data$dataResourceName, xf$data$dataResourceID) ## ## dr10 ## SLU Aqua Institute of Freshwater Research Swedish Electrofishing Registry - SERS 93205 table(xf$data$dataResourceID) ## ## dr10 ## 93205 1.1 Plotting data on a map You can quickly plot all the observations as a PDF file with the function ocurrence_plot(), one page per species: occurrences_plot(xf, &quot;obsPlot.pdf&quot;, grouped=FALSE, taxon_level=&quot;species&quot;, pch=&#39;.&#39;) Note that the plot is saved to a pdf file in the current working directory. You can find that with getwd(). 1.1.0.1 Leaflet There are many other ways of producing spatial plots in R. The leaflet package provides a simple method of producing browser-based maps with panning, zooming, and background layers: library(leaflet) # drop any records with missing lat/lon values xfl &lt;- xf$data[!is.na(xf$data$longitude) | !is.na(xf$data$latitude),] marker_colour &lt;- rep(&quot;#d95f02&quot;, nrow(xfl)) # blank map, with imagery background leaflet(width = &quot;100%&quot;) %&gt;% addProviderTiles(&quot;Esri.WorldImagery&quot;) %&gt;% # add markers addCircleMarkers(xfl$longitude, xfl$latitude, radius = 1, fillOpacity =.5, opacity = 1, col=marker_colour, clusterOptions = markerClusterOptions()) 1.2 Temporal summary A quick summary over the years reveal a drop in number of records over time. table(xf$data$year) ## ## 2008 2009 2010 2011 2012 ## 17757 19300 19648 16853 19647 hist(xf$data$year, breaks = seq(y1, y2), xlab = &quot;Year&quot;, main = &quot;&quot;) 1.3 Species summary In the same way we can summaries the number of observations for each species, by common or scientific name. sppTab &lt;- table(xf$data$commonName) sppDF &lt;- as.data.frame(sppTab) colnames(sppDF)[1] &lt;- &quot;species&quot; head(sppDF) ## species Freq ## 1 66 ## 2 Alpine bullhead 4615 ## 3 American burbot 7081 ## 4 Aral asp 6 ## 5 Arctic char 46 ## 6 aurora trout 856 sppTab &lt;- table(xf$data$scientificName) sppDF &lt;- as.data.frame(sppTab) colnames(sppDF)[1] &lt;- &quot;species&quot; head(sppDF) ## species Freq ## 1 Abramis brama (Linnaeus, 1758) 61 ## 2 Alburnus alburnus (Linnaeus, 1758) 660 ## 3 Anguilla anguilla (Linnaeus, 1758) 2140 ## 4 Astacus astacus (Linnaeus, 1758) 618 ## 5 Barbatula barbatula (Linnaeus, 1758) 620 ## 6 Blicca bjoerkna (Linnaeus, 1758) 74 Perhaps, you need to send this table as a .CSV file to a colleague. write.csv(sppDF, &quot;SERS_species_summary.csv&quot;) # NOTE: again this will be saved on your working directory 1.4 Spatial biodiversity analysis Lets now ask: how does the species richness vary across Sweden? In this case we want to summarise occurrences species-wise over a defined grid instead of plotting every observation point. First we need to overlay the observations with a grid. In this case, the standard Swedish grids at 50, 25, 10 and 5 km are provided as data in the SBDI4R package (with Coordinate Reference System = WGS84, EPSG:4326). library(sp) # the function coordinates() and proj4string() are in sp library(rgeos) # the function over() is in package rgeos ## Warning: package &#39;rgeos&#39; was built under R version 4.0.4 ## rgeos version: 0.5-5, (SVN revision 640) ## GEOS runtime version: 3.8.0-CAPI-1.13.1 ## Linking to sp version: 1.4-5 ## Polygon checking: TRUE # load some shapes over Sweden&#39;s political borders data(&quot;swe_wgs84&quot;, package=&quot;SBDI4R&quot;, envir=environment()) # A standard 50km grid data(&quot;Sweden_Grid_50km_Wgs84&quot;, package=&quot;SBDI4R&quot;, envir=environment()) grid &lt;- Sweden_Grid_50km_Wgs84 # make the observations spatial # NOTE: make sure there are no NAs on either column defining the coordinates # xf$data[!is.na(xf$data$longitude) | !is.na(xf$data$latitude),] obs &lt;- as.data.frame(xf$data) coordinates(obs) &lt;- obs[,c(&quot;longitude&quot;,&quot;latitude&quot;)] wkt &lt;- sf::st_crs(4326)[[2]] proj4string(obs) &lt;- sp::CRS(wkt) #CRS(&quot;+init=epsg:4326&quot;) nObs &lt;- nrow(obs) # overlay the data with the grid ObsInGridList &lt;- over(grid, obs, returnList=TRUE) wNonEmpty &lt;- unname( which( unlist(lapply(ObsInGridList, nrow)) != 0) ) if(length(wNonEmpty)==0) message(&quot;Observations don&#39;t overlap any grid cell.&quot;) The result ObsInGridList is a list object with a subset of the data on each grid. Now summarise occurrences within grid cells: # check n the total number of observations sum(unlist(lapply(ObsInGridList, nrow))) ## [1] 93205 # apply a summary over the grid cells nCells &lt;- length(ObsInGridList) res &lt;- data.frame(&quot;nObs&quot;=as.numeric(rep(NA,nCells)), &quot;nYears&quot;=as.numeric(rep(NA,nCells)), &quot;nSpp&quot;=as.numeric(rep(NA,nCells)), row.names = row.names(grid), stringsAsFactors = FALSE) cols2use &lt;- c(&quot;scientificName&quot;, &quot;year&quot;) dataRes &lt;- lapply(ObsInGridList[wNonEmpty], function(x){ x &lt;- x[,cols2use] colnames(x) &lt;- c(&quot;scientificName&quot;, &quot;year&quot;) return(c(&quot;nObs&quot; = length(x[,&quot;scientificName&quot;]), &quot;nYears&quot; = length(unique(x[,&quot;year&quot;])), &quot;nSpp&quot; = length(unique(x[,&quot;scientificName&quot;])) ) ) } ) dataRes &lt;- as.data.frame(dplyr::bind_rows(dataRes, .id = &quot;gridID&quot;)) res[wNonEmpty,] &lt;- dataRes[,-1] resSp &lt;- sp::SpatialPolygonsDataFrame(grid, res) And finally plot the grid summary as a map: palBW &lt;- leaflet::colorNumeric(c(&quot;white&quot;, &quot;navyblue&quot;), c(0, max(resSp@data$nSpp, na.rm = TRUE)), na.color = &quot;transparent&quot;) oldpar &lt;- par() par(mar = c(1,1,0,0)) plot(resSp, col=palBW(resSp@data$nSpp), border = NA) plot(swe_wgs84$Border, border=1, lwd=1, add=T) legend(&quot;bottomleft&quot;, legend = round(seq(0, max(resSp@data$nSpp, na.rm = TRUE), length.out = 5)), col = palBW(seq(0, max(resSp@data$nSpp, na.rm = TRUE), length.out = 5)), title = &quot;Number of \\nspecies&quot;, pch = 15, bty=&quot;n&quot;) par(oldpar) We can go further by gathering the observations by latitude. library(dplyr) library(tidyr) xgridded &lt;- xf$data %&gt;% mutate(longitude = round(longitude * 4)/4, latitude = round(latitude * 4)/4) %&gt;% group_by(longitude,latitude) %&gt;% ## subset to vars of interest select(longitude, latitude, species) %&gt;% ## take one row per cell per species (presence) distinct() %&gt;% ## calculate species richness mutate(richness=n()) %&gt;% ## convert to wide format (sites by species) mutate(present=1) %&gt;% do(tidyr::pivot_wider(data=., names_from=species, values_from=present, values_fill=0)) %&gt;% ungroup() ## where a species was not present, it will have NA: convert these to 0 sppcols &lt;- setdiff(names(xgridded), c(&quot;longitude&quot;, &quot;latitude&quot;, &quot;richness&quot;)) xgridded &lt;- xgridded %&gt;% mutate_at(sppcols, function(z) ifelse(is.na(z), 0, z)) And plot it accordingly library(ggplot2) ggplot(xgridded, aes(latitude, richness)) + labs(x = &quot;Latitude (¬∫)&quot;, y = &quot;Species richness&quot;) + lims(y = c(0,20)) + geom_point() + theme_bw() "],["example-with-opportunistic-data-on-dragonflies.html", "2 Example with opportunistic data on Dragonflies 2.1 Name searching 2.2 Filter the search to get the observations 2.3 Quality and fit-for-use check", " 2 Example with opportunistic data on Dragonflies In this example we are interested in exploring opportunistically collected data from the Swedish citizen science observation data portal - Artportalen. 2.1 Name searching To begin, we want be sure there is an unequivocal way to find the species within the order Odonata and nothing else, so lets search for it: sx &lt;- search_fulltext(&quot;odonata&quot;) sx$data[, c(&quot;guid&quot;, &quot;scientificName&quot;, &quot;rank&quot;, &quot;occurrenceCount&quot;)] ## guid scientificName rank occurrenceCount ## 1 9829523 Odonata associated gemycircularvirus 1 species 0 ## 2 10072832 Odonata associated gemycircularvirus 2 species 0 ## 3 8062407 Bdellodes odonata Wallace &amp; Mahon, 1976 species 0 ## 4 789 Odonata order 207680 ## 5 7367071 Ramalina fastigiata var. odonata Hue variety 0 We quickly see there that other taxonomic definitions appear too, but there is only one order. Lets refine the search. To know which search fields we can use to filter the search we use the function sbdi_fields(fields_type = \"general\"). The search field we are looking for is order_s. sx &lt;- search_fulltext(fq=&quot;order_s:Odonata&quot;, page_size = 10) sx$data[, c(&quot;scientificName&quot;, &quot;rank&quot;, &quot;occurrenceCount&quot;)] ## guid scientificName rank occurrenceCount ## 1 9829523 Odonata associated gemycircularvirus 1 species 0 ## 2 10072832 Odonata associated gemycircularvirus 2 species 0 ## 3 8062407 Bdellodes odonata Wallace &amp; Mahon, 1976 species 0 ## 4 789 Odonata order 207680 ## 5 7367071 Ramalina fastigiata var. odonata Hue variety 0 Now we can download the taxonomic data (note that the search is case-sensitive): tx &lt;- taxinfo_download(&quot;order_s:Odonata&quot;, fields = c(&quot;guid&quot;, &quot;order_s&quot;,&quot;genus_s&quot;, &quot;specificEpithet_s&quot;, &quot;scientificName&quot;, &quot;canonicalName_s&quot;, &quot;rank&quot;), verbose = FALSE) tx &lt;- tx[tx$rank == &quot;species&quot; &amp; tx$genusS != &quot;&quot;,] ## restrict to species and not hybrids Then you can save tx as the complete species list for later use. 2.2 Filter the search to get the observations As usual we start by searching for the data resource we are interested in using the function pick_filter(). This is an interactive query guiding you through the many resources available to filtering your query (data resources, spatial layers, and curated species lists). # follow the instructions fq_str &lt;- pick_filter(&quot;resource&quot;) Follow the instruction. Your choices here would have been in3 &gt; dr5. Your variable fq_str will now contain a string data_resource_uid:dr5. We only need data from 2000 to 2010 y1 &lt;- 2000 y2 &lt;- 2010 fq_str &lt;- c(fq_str, paste0(&quot;year:[&quot;, y1, &quot; TO &quot;, y2,&quot;]&quot;)) # Note the square brackets are hard limits We also need to filter spatially for Southern Sweden (G√∂taland). Vector spatial layers (eg. polygons) can be imported in a number of different ways. SBDI APIs take as search input polygons in the s.k. WKT Well Known Text format. So the first step is to load a vector layer and transform it into a WKT string. You could instead use the data we kindly provided in the SBDI4R package data(\"swe\"). data(&quot;swe&quot;) wGotaland &lt;- swe$Counties$LnNamn %in% c(&quot;Blekinge&quot;, &quot;Gotlands&quot;, &quot;Hallands&quot;, &quot;J√∂nk√∂pings&quot;, &quot;Kalmar&quot;, &quot;Kronobergs&quot;, &quot;√ñsterg√∂tlands&quot;, &quot;Sk√•ne&quot;, &quot;V√§stra G√∂talands&quot;) gotaland_c &lt;- swe$Counties[wGotaland,] Unfortunately, in this instance this gives a WKT string that is too long and wont be accepted by the web service. Also, the shapefile we just got is projected in the coordinate system SWEREF99 TM, and the web service only accepts coordinates in a geodesic coordinate system WGS84. Instead, lets construct the WKT string directly, which gives us a little more control over its format: gotaland_c &lt;- sf::as_Spatial( sf::st_transform( sf::st_as_sf(gotaland_c), crs = sf::st_crs(4326)$wkt) ) gotaland &lt;- rgeos::gUnaryUnion(gotaland_c) # extract the polygons coordinates nPol &lt;- length(gotaland@polygons[[1]]@Polygons) lonlat &lt;- list() for(p in seq(nPol)){ lonlat[[p]] &lt;- gotaland@polygons[[1]]@Polygons[[p]]@coords } lonlat &lt;- do.call(rbind, lonlat) # create a convex hull of the polygon to reduce the length of the WKT string gotaland_ch &lt;- chull(lonlat) lonlat &lt;- lonlat[c(gotaland_ch, gotaland_ch[1]), ] # create WKT string # first join each lon-lat coordinate pair wkt_temp &lt;- apply(lonlat, 1, function(z) paste(round(z,4), collapse=&quot; &quot;)) # now build the WKT string wkt &lt;- paste(&quot;MULTIPOLYGON(((&quot;, paste(wkt_temp, collapse=&quot;,&quot;), &quot;)))&quot;, sep=&quot;&quot;) # NOTE: as of today, the SBDI APIs will only work properly if the polygon is # submitted as a MULTIPOLYGON We download the observations using the command occurrences(), but be aware that the search fields may not be the same as those use to search for taxa. We therefore recommend using the function sbdi_fields(\"occurrence\"). Here see that the field we need this time is order. xf &lt;- SBDI4R::occurrences(taxon = &quot;order:Odonata&quot;, fq = fq_str, wkt = wkt, extra = &quot;collector&quot;, email = &quot;sbdi4r-test@biodiversitydata.se&quot;, download_reason_id = 10) We have now downloaded the data locally and depending on your configuration this will be cached on your computer. However, as the search and download could take long, we recommend to anyhow save the data locally. save(xf, file = &quot;an_approprieted_name.rdata&quot;) load(file = &quot;an_approprieted_name.rdata&quot;) 2.3 Quality and fit-for-use check Before we can use the observation records we need to know if the observation effort has varied over time and in space. For this we need to define field visits i.e. occasions at which an observer has sampled observations, and reconstruct them (that is, assign each observation a visitUID). We do this using the package BIRDS. We even want the data to be summarized over a grid of 25 km (provided by the SBDI4R package). The following functions will perform many different summaries at the same time. Please refer to the package documentation for more detail. library(BIRDS) OB &lt;- organiseBirds(xf$data, sppCol = &quot;species&quot; , # We only want observations identified at the species level taxonRankCol = &quot;rank&quot;, taxonRank = &quot;species&quot;, # the visits are defined by collector and named locality idCols = c(&quot;locality&quot;, &quot;collector&quot;), timeCols = c(&quot;year&quot;, &quot;month&quot;, &quot;day&quot;), xyCols =c(&quot;longitude&quot;,&quot;latitude&quot;) ) ## 252 observations did not match with the specified taxon rank and were removed. # We don&#39;t need the whole grid, just the piece that overlaps our searching polygon gotaland_grid25 &lt;- raster::intersect(gotaland, Sweden_Grid_25km_Wgs84) # This is another way of doing it. # gotaland_grid25 &lt;- gIntersection(gotaland, # spTransform(Sweden_Grid_25km_Wgs84, # CRSobj = CRS(sf::st_crs(4326)$wkt))) SB &lt;- summariseBirds(OB, grid = gotaland_grid25, spillOver = &quot;unique&quot;) ## 1664 observations did not overlap with the grid and will be discarded. ## 0.009 % of the visits spill over neighbouring grid cells. Once summarized, we can see over space and for a few selected year how was the sampling effort (in this case number of observations) distributed. maxC &lt;- max(SB$spatial@data$nObs, na.rm = TRUE) palBW &lt;- leaflet::colorNumeric(c(&quot;white&quot;, &quot;navyblue&quot;), c(0, maxC), na.color = &quot;transparent&quot;) oldpar &lt;- par() par(mar = c(4,0,4,0), mfrow=c(1,3)) plot(SB$spatial, col=palBW(SB$spatial@data$nObs), border = &quot;grey&quot;, main=&quot;All years&quot;) ## with palette legend(&quot;topleft&quot;, inset = c(0,0.05), legend = round(seq(0, maxC, length.out = 5)), col = palBW(seq(0, maxC, length.out = 5)), title = &quot;Number of \\nobservations&quot;, pch = 15, bty=&quot;n&quot;) ## or export other combinations, e.g. one map per observed year yearlySp &lt;- exportBirds(SB, dimension = &quot;spatial&quot;, timeRes = &quot;yearly&quot;, variable = &quot;nObs&quot;, method = &quot;sum&quot;) maxC &lt;- max(yearlySp@data$&#39;2005&#39;, na.rm = TRUE) palBW &lt;- leaflet::colorNumeric(c(&quot;white&quot;, &quot;navyblue&quot;), c(0, maxC), na.color = &quot;transparent&quot;) plot(yearlySp[&quot;2005&quot;], col=palBW(yearlySp@data$&#39;2005&#39;), border = &quot;grey&quot;,main=&quot;2005&quot;) legend(&quot;topleft&quot;, inset = c(0,0.05), legend = round(seq(0, maxC, length.out = 5)), col = palBW(seq(0, maxC, length.out = 5)), border = &quot;grey&quot;, title = &quot;Number of \\nobservations&quot;, pch = 15, bty=&quot;n&quot;) maxC &lt;- max(yearlySp@data$&#39;2010&#39;, na.rm = TRUE) palBW &lt;- leaflet::colorNumeric(c(&quot;white&quot;, &quot;navyblue&quot;), c(0, maxC), na.color = &quot;transparent&quot;) plot(yearlySp[&quot;2010&quot;], col=palBW(yearlySp@data$&#39;2010&#39;), border = &quot;grey&quot;,main=&quot;2010&quot;) legend(&quot;topleft&quot;, inset = c(0,0.05), legend = round(seq(0, maxC, length.out = 5)), col = palBW(seq(0, maxC, length.out = 5)), border = &quot;grey&quot;, title = &quot;Number of \\nobservations&quot;, pch = 15, bty=&quot;n&quot;) par(oldpar) There are other ways to plot spatial data, here there is another example this time using the package sf instead of sp and using number of visits as the measure for sampling effort. library(sf) library(cowplot) library(ggplot2) library(colorRamps) library(gridExtra) spatial_sf &lt;- st_as_sf(SB$spatial) vis &lt;- ggplot(data = spatial_sf, aes( fill = nVis)) + geom_sf() + ggtitle(&quot;Visits&quot;) + scale_fill_gradient(low = &quot;#56B1F7&quot;, high = &quot;#132B43&quot;, na.value = NA) + theme(plot.margin = margin(1, 1, 1, 1, &quot;pt&quot;)) + theme_cowplot() spp &lt;- ggplot(data = spatial_sf ,aes( fill = nSpp))+ geom_sf()+ ggtitle(&quot;Number of species&quot;)+ scale_fill_gradient(low = &quot;#56B1F7&quot;, high = &quot;#132B43&quot;, na.value = NA) + theme(plot.margin = margin(1, 1, 1, 1, &quot;pt&quot;)) + theme_cowplot() grid.arrange(vis, spp, ncol=2) How has observation effort (frequency of visits) varied over time and space?  1) show maps as in Example 7 (all years, year 2000, 2002, 2004, 2006, 2008, 2010), 2 make also a time line plot with no. visits against years, no. of gridcells with visits against years. we see that SB contains an element called SB$temporal that contains a daily time series with time specific rows when there is information. xts also supports time, but dating below day resolution is not yet implemented in the BIRDS package. sb.xts &lt;- SB$temporal dim(sb.xts) ## [1] 1118 3 head(sb.xts, 20) ## nObs nVis nSpp ## 2000-03-24 1 1 1 ## 2000-04-05 4 3 3 ## 2000-04-06 11 6 3 ## 2000-04-10 1 1 1 ## 2000-04-12 3 3 1 ## 2000-04-13 8 5 2 ## 2000-04-20 1 1 1 ## 2000-04-21 5 4 2 ## 2000-04-23 5 2 3 ## 2000-04-24 7 5 2 ## 2000-04-26 1 1 1 ## 2000-04-27 7 6 3 ## 2000-04-28 9 7 3 ## 2000-04-29 6 3 3 ## 2000-05-27 1 1 1 ## 2000-06-03 1 1 1 ## 2000-07-30 1 1 1 ## 2000-08-03 1 1 1 ## 2000-08-05 5 2 5 ## 2000-08-06 3 1 3 Sub-setting is convenient in xts as you can do it with its dates and with a / for a range of dates. sb.xts[&quot;2010-09-07&quot;] #a specific day ## nObs nVis nSpp ## 2010-09-07 9 7 5 sb.xts[&quot;2010-09-01/2010-09-15&quot;] #for a period ## nObs nVis nSpp ## 2010-09-01 38 15 14 ## 2010-09-02 26 12 12 ## 2010-09-03 20 9 10 ## 2010-09-04 63 19 18 ## 2010-09-05 71 25 12 ## 2010-09-06 16 4 9 ## 2010-09-07 9 7 5 ## 2010-09-08 13 6 8 ## 2010-09-09 32 12 14 ## 2010-09-10 1 1 1 ## 2010-09-11 15 8 8 ## 2010-09-12 15 7 8 ## 2010-09-13 14 5 9 ## 2010-09-14 1 1 1 ## 2010-09-15 3 3 2 sb.xts[&quot;2010-09&quot;] #a specific month ## nObs nVis nSpp ## 2010-09-01 38 15 14 ## 2010-09-02 26 12 12 ## 2010-09-03 20 9 10 ## 2010-09-04 63 19 18 ## 2010-09-05 71 25 12 ## 2010-09-06 16 4 9 ## 2010-09-07 9 7 5 ## 2010-09-08 13 6 8 ## 2010-09-09 32 12 14 ## 2010-09-10 1 1 1 ## 2010-09-11 15 8 8 ## 2010-09-12 15 7 8 ## 2010-09-13 14 5 9 ## 2010-09-14 1 1 1 ## 2010-09-15 3 3 2 ## 2010-09-17 3 2 3 ## 2010-09-18 9 5 5 ## 2010-09-19 12 7 5 ## 2010-09-21 3 2 3 ## 2010-09-22 4 4 2 ## 2010-09-23 3 3 2 ## 2010-09-24 10 5 5 ## 2010-09-25 6 3 6 ## 2010-09-26 7 6 2 ## 2010-09-28 2 2 2 ## 2010-09-29 5 3 4 ## 2010-09-30 2 2 2 The package xts has several tools for converting to different periods. Here we will use to.monthly. This provides, the first, min, max, and last of the data. We can plot the daily maximum number of observations. The plot command with an xts object provides a TON of features. This makes it fairly easy to customize your plots. Read more in ?plot.xts. library(xts) obs.m &lt;- to.monthly(sb.xts$nObs) obs.m[&quot;2007-04&quot;] ## sb.xts$nObs.Open sb.xts$nObs.High sb.xts$nObs.Low sb.xts$nObs.Close ## Apr 2007 7 14 1 2 sb.xts[&quot;2007-04&quot;] ## nObs nVis nSpp ## 2007-04-02 7 4 4 ## 2007-04-11 14 7 3 ## 2007-04-12 8 6 4 ## 2007-04-13 1 1 1 ## 2007-04-15 1 1 1 ## 2007-04-17 6 4 3 ## 2007-04-18 1 1 1 ## 2007-04-21 1 1 1 ## 2007-04-23 1 1 1 ## 2007-04-27 11 6 4 ## 2007-04-28 4 4 3 ## 2007-04-30 2 2 2 plot(obs.m[&quot;2000/2010&quot;,2], col = &quot;darkblue&quot;, grid.ticks.on = &quot;month&quot;, major.ticks = &quot;month&quot;, grid.col = &quot;lightgrey&quot;, main = &quot;Maximum number of daily observations/visits per month&quot;) vis.m &lt;- to.monthly(sb.xts$nVis) vis.m[&quot;2007-04&quot;] ## sb.xts$nVis.Open sb.xts$nVis.High sb.xts$nVis.Low sb.xts$nVis.Close ## Apr 2007 4 7 1 2 sb.xts[&quot;2007-04&quot;] ## nObs nVis nSpp ## 2007-04-02 7 4 4 ## 2007-04-11 14 7 3 ## 2007-04-12 8 6 4 ## 2007-04-13 1 1 1 ## 2007-04-15 1 1 1 ## 2007-04-17 6 4 3 ## 2007-04-18 1 1 1 ## 2007-04-21 1 1 1 ## 2007-04-23 1 1 1 ## 2007-04-27 11 6 4 ## 2007-04-28 4 4 3 ## 2007-04-30 2 2 2 lines(vis.m[&quot;2000/2010&quot;,2], col = &quot;orange&quot;, lwd=2) # major.ticks = &quot;month&quot;, grid.col = &quot;lightgrey&quot;, # main = &quot;Maximum number of daily visits per month&quot;) We can now look at some particular species and ask whether this has changed in occurrence over time: Plot no. records of species x and no. visits all species over years (we simply explore by comparing records for a species with no visits, can assume that species has increased of stronger positive trend than for no. visits) Plot no. gridcells with visits for species x and no. gridcells with visits for all species over years (we simply explore by comparing records for a species with no visits, can assume that species has increased of stronger positive trend than for no. visits) (species x: Tv√•fl√§ckad trollsl√§nda Epitheca bimaculata) "]]
