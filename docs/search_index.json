[["index.html", "Tutorial for using SBDI4R for analysis of biodiversity primary data Introduction", " Tutorial for using SBDI4R for analysis of biodiversity primary data Debora Arlt and Alejandro Ruete for the Swedish Biodiversity Data Infrastructure 2021-05-12 Introduction [TO BE UPDATED] Each research question draws its own challenges which are unique in themselves. Our aim here is to provide a workflow which answers and / or prompts the large scale questions that should be asked at each stage of the process. We point to resources, methods and facilities that may be useful in answering a particular question. We assume some knowledge of statistical inference and it limitations. The validity and appropriateness of a particular method is dependent on the individual researcher(s). This workflow is focused on the statistical programming language R, as an environment where the complete analysis workflow can take place and can be documented in a fully reproducible way. However, we also point to other tools that can be used at different stages, and ways to import and export the data from and to those tools. Biodiversity resources are increasingly international. We focus on biodiversity data and resources from Sweden but our aim is to present considerations and methods that can be applied beyond Swedens borders. General description of the workflow here. Data&gt;Cleaning&gt;Fitness evaluation&gt;Analysis always exploring and filtering the data in light of the research question. Also say here that if known from before, the cleaning and filtering criteria can be set directly on the query! The SBDI4R package is primarily for accessing data. It includes some filter functions that allow you to filter prior to download. It also includes some simple summary functions, and some function for some simple data exploration. The examples also show you how you can use the data by continued exploring and analyzing using other R package. Please get in contact with us [MAILTO] if you have questions regarding the use of the SBDI4R package. "],["package-configuration.html", "1 Package configuration", " 1 Package configuration Lets assume you have already installed the package as shown in the main site. The SBDI4R package must be loaded for each new R session: library(SBDI4R) sbdi_config(caching=&quot;off&quot;) However, the options you stored in .Rprofile if you did it so, will load automatically with the package. Then, check that we have some additional packages that well use in the examples, and install them if necessary. to_install &lt;- c(&quot;dplyr&quot;, &quot;ggplot2&quot;, &quot;jpeg&quot;, &quot;leaflet&quot;,&quot;maps&quot;, &quot;mapdata&quot;, &quot;maptools&quot;, &quot;sp&quot;, &quot;rgeos&quot;, &quot;tidyr&quot;, &quot;vegan&quot;) to_install &lt;- to_install[!sapply(to_install, requireNamespace, quietly=TRUE)] if(length(to_install)&gt;0) install.packages(to_install, repos=&quot;http://cran.us.r-project.org&quot;) "],["case-1-example-with-fish-data-from-nors.html", "2 Case 1: Example with fish data from NORS 2.1 Plotting data on a map 2.2 Temporal analysis 2.3 Species summary 2.4 Spatial biodiversity analysis", " 2 Case 1: Example with fish data from NORS In this example we are interested in exploring data from a specific data resource  Sjöprovfiskedatabasen NORS (Institutionen för akvatiska resurser, SLU). This data base has 2.8 M observations starting in the 1950s. As you may already know, SBDI is a collection of many biodiversity databases. We start by searching for the data resource we are interested in using the function pick_filter(). This is an interactive query guiding you through the many resources available to filtering your query (data resources, spatial layers, and curated species lists). fq_str &lt;- pick_filter(&quot;resource&quot;) ## follow the instructions Follow the instruction. Your choices here would have been in3 &gt; dr20. Your variable fq_str will now contain a string data_resource_uid:dr20. ## we cant do it interactive here so we force it fq_str &lt;- &quot;data_resource_uid:dr20&quot; But we are not interested in the complete database, but on the last 10 years of data. for this we concatenate (add to a vector) another filter string. These will be treated as AND factors. y1 &lt;- 2012 y2 &lt;- 2021 fq_str &lt;- c(fq_str, paste0(&quot;year:[&quot;, y1, &quot; TO &quot;, y2,&quot;]&quot;)) ## Note the square brackets are hard limits For references on how to use the filters see documentation at docs. Using the function occurrences() we can the query for the observations fulfilling our filter. If you havent specified that in the sbdi_config() before (see Case 1: Example with fish data from NORS Installation), you need to pass your email and the download reason. library(SBDI4R) #&gt; Error in SBDI4R::sbdi_config(cache_directory = file.path(&quot;~&quot;, &quot;sbdi_cache&quot;), : #&gt; cache directory ~/sbdi_cache does not exist xf &lt;- occurrences(fq = fq_str, email = &quot;test@test.org&quot;, download_reason_id=10) ## Simply summarise all records by data source table(xf$data$dataResourceName) #&gt; #&gt; #&gt; 29 #&gt; SLU Aqua Institute of Freshwater Research National register of survey test-fishing - NORS #&gt; 187508 2.1 Plotting data on a map You can quickly plot all the observations as a PDF file with the function ocurrence_plot(), one page per species: occurrences_plot(x, &quot;obsPlot.pdf&quot;, grouped=FALSE, taxon_level=&quot;species&quot;, pch=&#39;+&#39;) Note that the plot is saved to a pdf file in the current working directory. You can find that with getwd(). 2.1.0.1 Leaflet There are many other ways of producing spatial plots in R. The leaflet package provides a simple method of producing browser-based maps with panning, zooming, and background layers: library(leaflet) # drop any records with missing lat/lon values xfl &lt;- xf$data[!is.na(xf$data$longitude) | !is.na(xf$data$latitude),] marker_colour &lt;- rep(&quot;#d95f02&quot;, nrow(xfl)) # blank map, with imagery background leaflet(width = &quot;100%&quot;) %&gt;% addProviderTiles(&quot;Esri.WorldImagery&quot;) %&gt;% # add markers addCircleMarkers(xfl$longitude, xfl$latitude, radius = 1, fillOpacity =.5, opacity = 1, col=marker_colour, clusterOptions = markerClusterOptions()) 2.2 Temporal analysis A quick summary over the years reveal a drop in number of records over time, and stops . table(xf$data$year) #&gt; #&gt; 2012 2013 2014 2015 2016 2017 2018 2019 #&gt; 69685 68470 35715 4425 2900 2019 2417 1906 hist(xf$data$year, breaks = seq(y1, y2), xlab = &quot;Year&quot;, main = &quot;&quot;) 2.3 Species summary In the same way we can summaries the number of observations for each species, by common or scientific name. sppTab &lt;- table(xf$data$commonName) sppDF &lt;- as.data.frame(sppTab) colnames(sppDF)[1] &lt;- &quot;species&quot; sppDF #&gt; species Freq #&gt; 1 19481 #&gt; 2 Alaska fourhorn sculpin 470 #&gt; 3 Alpine bullhead 614 #&gt; 4 American burbot 7982 #&gt; 5 Aral asp 717 #&gt; 6 Arctic char 4827 #&gt; 7 Baltic vimba 304 #&gt; 8 bleak 11355 #&gt; 9 Blue bream 502 #&gt; 10 brown trout 3827 #&gt; 11 Bullhead 91 #&gt; 12 carps 1161 #&gt; 13 common carp, carp 20 #&gt; 14 Common dace 357 #&gt; 15 crucian carp 695 #&gt; 16 eel 79 #&gt; 17 European pike-perch 6791 #&gt; 18 European whitefish 8816 #&gt; 19 grayling 706 #&gt; 20 gudgeon 238 #&gt; 21 ide, orfe 1194 #&gt; 22 Miller&#39;s thumbs 361 #&gt; 23 minnow 1975 #&gt; 24 perch 28520 #&gt; 25 pike 21319 #&gt; 26 Pope 15933 #&gt; 27 rainbow trout 94 #&gt; 28 roach 24811 #&gt; 29 rudd 6485 #&gt; 30 salmon 35 #&gt; 31 smelt 7118 #&gt; 32 spined loach 850 #&gt; 33 sprat 40 #&gt; 34 ten-spined stickleback, nine-spined stickleback 128 #&gt; 35 tench 4492 #&gt; 36 white bream 5149 sppTab &lt;- table(xf$data$scientificName) sppDF &lt;- as.data.frame(sppTab) colnames(sppDF)[1] &lt;- &quot;species&quot; sppDF #&gt; species Freq #&gt; 1 Abramis brama (Linnaeus, 1758) 11616 #&gt; 2 Alburnus alburnus (Linnaeus, 1758) 11355 #&gt; 3 Anguilla anguilla (Linnaeus, 1758) 79 #&gt; 4 Ballerus ballerus (Linnaeus, 1758) 502 #&gt; 5 Blicca bjoerkna (Linnaeus, 1758) 5149 #&gt; 6 Carassius carassius (Linnaeus, 1758) 695 #&gt; 7 Cobitis taenia Linnaeus, 1758 850 #&gt; 8 Coregonus albula albula 7865 #&gt; 9 Coregonus maraena (Bloch, 1779) 8816 #&gt; 10 Cottus gobio Linnaeus, 1758 91 #&gt; 11 Cottus Linnaeus, 1758 361 #&gt; 12 Cottus poecilopus Heckel, 1840 614 #&gt; 13 Cyprinidae 1161 #&gt; 14 Cyprinus carpio Linnaeus, 1758 20 #&gt; 15 Esox lucius Linnaeus, 1758 21319 #&gt; 16 Gobio gobio (Linnaeus, 1758) 238 #&gt; 17 Gymnocephalus cernua (Linnaeus, 1758) 15933 #&gt; 18 Leuciscus aspius (Linnaeus, 1758) 717 #&gt; 19 Leuciscus idus (Linnaeus, 1758) 1194 #&gt; 20 Leuciscus leuciscus (Linnaeus, 1758) 357 #&gt; 21 Lota lota (Linnaeus, 1758) 7982 #&gt; 22 Myoxocephalus quadricornis (Linnaeus, 1758) 470 #&gt; 23 Oncorhynchus mykiss (Walbaum, 1792) 94 #&gt; 24 Osmerus eperlanus (Linnaeus, 1758) 7118 #&gt; 25 Perca fluviatilis Linnaeus, 1758 28520 #&gt; 26 Phoxinus phoxinus (Linnaeus, 1758) 1975 #&gt; 27 Pungitius pungitius (Linnaeus, 1758) 128 #&gt; 28 Rutilus rutilus (Linnaeus, 1758) 24811 #&gt; 29 Salmo salar Linnaeus, 1758 35 #&gt; 30 Salmo trutta Linnaeus, 1758 3827 #&gt; 31 Salvelinus alpinus (Linnaeus, 1758) 4827 #&gt; 32 Sander lucioperca (Linnaeus, 1758) 6791 #&gt; 33 Scardinius erythrophthalmus (Linnaeus, 1758) 6485 #&gt; 34 Sprattus sprattus (Linnaeus, 1758) 40 #&gt; 35 Thymallus thymallus (Linnaeus, 1758) 706 #&gt; 36 Tinca tinca (Linnaeus, 1758) 4492 #&gt; 37 Vimba vimba (Linnaeus, 1758) 304 Perhaps, you need to send this table as a .CSV file to a colleague. write.csv(sppDF, &quot;NORS species summary.csv&quot;) # NOTE: again this will be saved on your working directory 2.4 Spatial biodiversity analysis Lets now ask: how does the species richness vary across Sweden? In this case we want to summarise occurrences species-wise over a defined grid instead of plotting every observation point. First we need to overlay the observations with a grid. In this case, the standard Swedish grids at 50, 25, 10 and 5 km are provided as data in the SBDI4R package (with Coordinate Reference System = WGS84, EPSG:4326). library(sp) # the function coordinates() and proj4string() are in sp library(rgeos) # the function over() is in package rgeos # load some shapes over Sweden&#39;s political borders data(&quot;swe_wgs84&quot;, package=&quot;SBDI4R&quot;, envir=environment()) # A standard 50km grid data(&quot;Sweden_Grid_50km_Wgs84&quot;, package=&quot;SBDI4R&quot;, envir=environment()) grid &lt;- Sweden_Grid_50km_Wgs84 # grid &lt;- spTransform(grid, CRS(&quot;+init=epsg:4326&quot;)) # as mentioned above, the grid already has has the same CRS, but changes are undergoing in the sp package and this step is needed # make the observations spatial # NOTE: make sure there are no NAs on either column defining the coordinates # xf$data[!is.na(xf$data$longitude) | !is.na(xf$data$latitude),] obs &lt;- as.data.frame(xf$data) coordinates(obs) &lt;- obs[,c(&quot;longitude&quot;,&quot;latitude&quot;)] wkt &lt;- sf::st_crs(4326)[[2]] proj4string(obs) &lt;- sp::CRS(wkt) #CRS(&quot;+init=epsg:4326&quot;) nObs &lt;- nrow(obs) # overlay the data with the grid ObsInGridList &lt;- over(grid, obs, returnList=TRUE) wNonEmpty &lt;- unname( which( unlist(lapply(ObsInGridList, nrow)) != 0) ) if(length(wNonEmpty)==0) message(&quot;Observations don&#39;t overlap any grid cell.&quot;) The result ObsInGridList is a list object with a subset of the data on each grid. Now summarise occurrences within grid cells: # check n the total number of observations sum(unlist(lapply(ObsInGridList, nrow))) #&gt; [1] 187537 # apply a summary over the grid cells nCells &lt;- length(ObsInGridList) res &lt;- data.frame(&quot;nObs&quot;=as.numeric(rep(NA,nCells)), &quot;nYears&quot;=as.numeric(rep(NA,nCells)), &quot;nSpp&quot;=as.numeric(rep(NA,nCells)), row.names = row.names(grid), stringsAsFactors = FALSE) cols2use &lt;- c(&quot;scientificName&quot;, &quot;year&quot;) dataRes &lt;- lapply(ObsInGridList[wNonEmpty], function(x){ x &lt;- x[,cols2use] colnames(x) &lt;- c(&quot;scientificName&quot;, &quot;year&quot;) return(c(&quot;nObs&quot; = length(x[,&quot;scientificName&quot;]), &quot;nYears&quot; = length(unique(x[,&quot;year&quot;])), &quot;nSpp&quot; = length(unique(x[,&quot;scientificName&quot;])) )) }) dataRes &lt;- as.data.frame(dplyr::bind_rows(dataRes, .id = &quot;gridID&quot;)) res[wNonEmpty,] &lt;- dataRes[,-1] resSp &lt;- sp::SpatialPolygonsDataFrame(grid, res) And finally plot the grid summary as a map: palBW &lt;- leaflet::colorNumeric(c(&quot;white&quot;, &quot;navyblue&quot;), c(0, max(resSp@data$nSpp, na.rm = TRUE)), na.color = &quot;transparent&quot;) oldpar &lt;- par() par(mar = c(1,1,0,0)) plot(resSp, col=palBW(resSp@data$nSpp), border = NA) plot(swe_wgs84$Border, border=1, lwd=1, add=T) legend(&quot;bottomleft&quot;, legend = round(seq(0, max(resSp@data$nSpp, na.rm = TRUE), length.out = 5)), col = palBW(seq(0, max(resSp@data$nSpp, na.rm = TRUE), length.out = 5)), title = &quot;Number of \\nspecies&quot;, pch = 15, bty=&quot;n&quot;) suppressWarnings(par(oldpar)) "],["the-importance-of-questions-and-sources-of-data.html", "3 The importance of questions and sources of data 3.1 Questions 3.2 Taxonomies 3.3 Data Sources", " 3 The importance of questions and sources of data 3.1 Questions Any question to be asked of biodiversity data should be put as simply and succinctly as possible. With the number of different subject areas and techniques used, analyses can quickly become complex. 3.2 Taxonomies It is important to be aware of likely taxonomic anomalies prior to working within a region. Checklists are very important, especially if working over several regions / countries. Whilst there are many things that will automatically look for the validity of a name they do not check for the validity of that species occurrence. For example Sphagnum auriculatum and S. denticulatum are both valid names. S. auriculatum is the currently accepted species in Europe but in the British Isles, Ireland and the Netherlands s. denticulatum is the most recorded taxa. Using data from across the European region without acknowledging this disagreement would impact the results of any research undertaken. For taxa which are known to be capable of dispersing great distances (eg birds) this becomes even more difficult especially when using community sourced data. For Sweden there is an agreed taxonomy for species accesible through [https://www.dyntaxa.se/] and the R library dyntaxa. 3.3 Data Sources Depending on what questions are being asked there are many different resources available. We focus on biodiversity data 3.3.1 Biodiversity record data Artportalen [https://www.artportalen.se/] - Swedens data portal for biodiversity data Global Biodiversity Information Facility [http://www.gbif.org/] - International organization aggregating biodiversity data. Contains data from a mixture of sources; curated collections, community science data, ecological research projects etc. rgbif, spocc BioCASE [https://www.biocase.org/] - A European transnational biodiversity repository eBird [http://ebird.org/content/ebird/] - American database of bird observations auk, rebird,spocc iNaturalist http://www.inaturalist.org/ - International community science observation repository spocc Berkeley ecoengine [https://ecoengine.berkeley.edu] - Access to UC Berkleys Natural history data spocc VertNet [http://vertnet.org/] - vertebrate biodiversity collections rvert, spocc iDigBio [https://www.idigbio.org/] - Integrated digitise biodiversity collections ridigbio OBIS [http://www.iobis.org/] - Ocean biodiversity information system robis ALA [http://www.ala.org.au/] - Atlas of living Australia ALA4r Neotoma [https://www.neotomadb.org/] Palaeoecology databas neotoma  "],["references.html", "References", " References "]]
