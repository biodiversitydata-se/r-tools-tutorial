[["index.html", "Using R tools for analysis of primary biodiversity data provided by SBDI Introduction R and Mirroreum sbdi4r2 - a new R  to search an access data Other packages needed Your collaboration is appreciated", " Using R tools for analysis of primary biodiversity data provided by SBDI Debora Arlt and Alejandro Ruete for the Swedish Biodiversity Data Infrastructure 2024-05-06 Introduction Biodiversity resources are increasingly international. The SBDI has made an effort to canalise biodiversity data and resources to help the research community access and analyse Swedish primary biodiversity data. Each research question draws its own challenges which are unique in themselves. Our aim here is to provide a few examples that prompt questions that may be asked at different stages of the process. The validity and appropriateness of a particular method depends on the individual researcher(s). For a comprehensive workflow on how to treat and analyse primary biodiversity data please refer to our tutorial on biodiversity analysis tools where we go through the complete workflow Data –&gt; Cleaning –&gt; Fitness evaluation –&gt; Analysis R and Mirroreum The present tutorial is focused on the statistical programming language R. R is a free software environment for statistical computing and graphics that is widely used within the scientific community and where the complete analysis workflow can be documented in a fully reproducible way. At SBDI we provide access for researchers and students to Mirroreum – an online web-based environment for Reproducible Open Research in the area of biodiversity analysis. Mirroreum is based on a Free and Open Source stack of software. Logging in, you immediately get access to a web-based version of R Studio with a large number of pre-installed packages such as all the packages offered from ROpenSci and more. Compared to running R Studio on your own machine, Mirroreum offers more computational resources and a standardized environment where you can rely on all the relevant packages being installed and the configuration parameters being set appropriately. To know more about Mirroreum or to request an account please visit the SBDI documentation site sbdi4r2 - a new R  to search an access data The sbdi4r2 package enables the R community to directly access data and resources hosted by SBDI. The goal is to enable observations of species to be queried and output in a range of standard formats. It includes some filter functions that allow you to filter prior to download. It also includes some simple summary functions, and some function for some simple data exploration. The examples included in this tutorial also show you how you can continue exploring and analyzing using other R package. Please refer to the package documentation for details on how to install it. Once installed the sbdi4r2 package must be loaded for each new R session: library(sbdi4r2) Various aspects of the sbdi4r2 package can be customized. E-mail address Each download request to SBDI servers is also accompanied by an “e-mail address” string that identifies the user making the request. You will need to provide an email address registered with the SBDI. You can create an account here. Once an email is registered with the SBDI, it should be stored in the config: sbdi_config(email = &quot;your.registered@emailaddress.com&quot;) Else you can provide this e-mail address as a parameter directly to each call of the function occurrences(). Setting the download reason SBDI requires that you provide a reason when downloading occurrence data (via the sbdi4r2 atlas_occurrences() function). You can provide this as a parameter directly to each call of atlas_occurrences(), or you can set it once per session using: sbdi_config(download_reason_id = &quot;your_reason_id&quot;) (See sbdi_reasons() for valid download reasons, e.g. * 3 for “education”, * 7 for “ecological research”, * 8 for “systematic research/taxonomy”, * 10 for “testing”) Privacy NO other personal identification information is sent. You can see all configuration settings, including the the user-agent string that is being used, with the command: sbdi_config() Other packages needed Some additional packages are needed for these examples. Install them if necessary with the following script: to_install &lt;- c(&quot;colorRamps&quot;, &quot;cowplot&quot;,&quot;dplyr&quot;, &quot;ggplot2&quot;, &quot;leaflet&quot;, &quot;maps&quot;, &quot;mapdata&quot;, &quot;remotes&quot;, &quot;sf&quot;, &quot;tidyr&quot;, &quot;xts&quot;) to_install &lt;- to_install[!sapply(to_install, requireNamespace, quietly = TRUE)] if (length(to_install) &gt; 0) install.packages(to_install, repos = &quot;http://cran.us.r-project.org&quot;) remotes::install_github(&quot;Greensway/BIRDS&quot;) Your collaboration is appreciated Open Source also means that you can contribute. You don’t need to know how to program but every input is appreciated. Did you find something that is not working? Have suggestions for examples or text? you can always Reach to us via the support center Submit and issue to the GitHub code repository see how Or contribute with your code or documents modifications by “forking” the code and submitting a “pull request” The repositories you can contribute to are: Mirroreum https://github.com/mskyttner/mirroreum sbdi4r2 https://github.com/biodiversitydata-se/sbdi4r2 the general analysis workflows https://github.com/biodiversitydata-se/biodiversity-analysis-tools this R-tools tutorial https://github.com/biodiversitydata-se/r-tools-tutorial "],["example-with-fish-data-from-sers.html", "1 Example with fish data from SERS 1.1 Plotting data on a map 1.2 Temporal summary 1.3 Species summary 1.4 Spatial biodiversity analysis", " 1 Example with fish data from SERS In this example we are interested in exploring data from a specific data resource – the Swedish Electrofishing Registry - SERS (Department of Aquatic Resources, SLU Aqua). This database has 2.8 M observations starting in the 1950’s. library(sbdi4r2) library(sf) library(dplyr) library(lubridate) SBDI is a collection of many biodiversity databases. We start by searching for the data resource we are interested in by using the function pick_filter(). This is an interactive query guiding you through the many resources available to filtering your query (data resources, spatial layers, and curated species lists). fq_str &lt;- pick_filter(&quot;resource&quot;) # follow the instructions Follow the instructions. Your choices here would have been “in3” :arrow_right: “dr10” (data resource 10 = SERS). Your variable fq_str will now contain a string “data_resource_uid:dr10”. Note: the function pick_filter() is temporarily disabled until it could be adapted to the new galah framework. But we are not interested in the complete database, we only want to look at the data from the last 10 years. For this we add another filter string. Both filter strings (for data resource and for time period) will be treated as AND factors. Using the function sbdi_call() we can now query for the observations fulfilling our filter. xf &lt;- sbdi_call() |&gt; filter(dataResourceUid == &quot;dr10&quot;, year &gt;= 2014, year &lt;= 2024) |&gt; atlas_occurrences() ## --- xf |&gt; pull(dataResourceName) |&gt; table() |&gt; as.data.frame() |&gt; rename(&quot;Source&quot; = Var1) ## Source ## 1 SLU Aqua Institute of Freshwater Research Swedish Electrofishing Registry - SERS ## Freq ## 1 26907 1.1 Plotting data on a map There are many other ways of producing spatial plots in R, for example you can quickly plot all the observations with plot(): data(&quot;swe_wgs84&quot;, package = &quot;sbdi4r2&quot;, envir = environment()) plot(swe_wgs84[[&quot;Border&quot;]]$geometry, col = &quot;grey&quot;, border = NA) points(xf$decimalLongitude, xf$decimalLatitude, pch = &quot;.&quot;, col = &quot;black&quot;) 1.2 Temporal summary A quick summary over the years reveals a drop in number of records over time. xf$year &lt;- year(xf$eventDate) table(xf$year) ## ## 2014 2015 2016 2017 2018 2019 2020 2021 ## 10299 3613 2773 2781 3424 2903 1042 72 hist(xf$year, breaks = seq(2014, 2024), xlab = &quot;Year&quot;, main = &quot;&quot;) 1.3 Species summary In the same way we can summarise the number of observations for each species. sppTab &lt;- table(xf$scientificName) sppDF &lt;- as.data.frame(sppTab) colnames(sppDF)[1] &lt;- &quot;species&quot; head(sppDF) ## species Freq ## 1 Abramis brama 3 ## 2 Alburnus alburnus 103 ## 3 Anguilla anguilla 285 ## 4 Astacidae 23 ## 5 Astacus astacus 73 ## 6 Barbatula barbatula 45 Perhaps, you want to send this table as a .CSV file to a colleague. Save the table: write.csv(sppDF, &quot;data/SERS_species_summary.csv&quot;) # NOTE: again this will be saved on your working directory 1.4 Spatial biodiversity analysis Let’s now ask: How does the species richness vary across Sweden? For this we want to summarise occurrences species-wise over a defined grid instead of plotting every observation point. First we need to overlay the observations with a grid. Here we are using the standard Swedish grids with grid square size of 50, 25, 10 or 5 km provided as data in the sbdi4r2 package (with Coordinate Reference System = WGS84, EPSG:4326). library(sf) # the function coordinates() and proj4string() are in sp # load some shapes over Sweden&#39;s political borders data(&quot;swe_wgs84&quot;, package = &quot;sbdi4r2&quot;, envir = environment()) # a standard 50 km grid data(&quot;Sweden_Grid_50km_Wgs84&quot;, package = &quot;sbdi4r2&quot;, envir = environment()) grid &lt;- Sweden_Grid_50km_Wgs84 # make the observations spatial # NOTE: make sure there are no NAs in the columns defining the coordinates # xf$data[!is.na(xf$data$longitude) | !is.na(xf$data$latitude),] obs &lt;- st_as_sf(as.data.frame(xf), coords = c(&quot;decimalLongitude&quot;,&quot;decimalLatitude&quot;), crs = st_crs(4326)) # overlay the occurrence data with the grid ObsInGridListID &lt;- st_intersects(grid, obs) ObsInGridList &lt;- lapply(ObsInGridListID, function(x) st_drop_geometry(obs[x,])) wNonEmpty &lt;- unname( which( unlist(lapply(ObsInGridList, nrow)) != 0) ) The result ObsInGridList is a list object with a subset of the data for each grid cell. Now summarise occurrences within grid cells: # check n the total number of observations sum(unlist(lapply(ObsInGridList, nrow))) ## [1] 26907 # apply a summary over the grid cells nCells &lt;- length(ObsInGridList) res &lt;- data.frame(&quot;nObs&quot; = as.numeric(rep(NA,nCells)), &quot;nYears&quot; = as.numeric(rep(NA,nCells)), &quot;nSpp&quot; = as.numeric(rep(NA,nCells)), row.names = row.names(grid), stringsAsFactors = FALSE) cols2use &lt;- c(&quot;scientificName&quot;, &quot;year&quot;) dataRes &lt;- lapply(ObsInGridList[wNonEmpty], function(x){ x &lt;- x[,cols2use] colnames(x) &lt;- c(&quot;scientificName&quot;, &quot;year&quot;) return(c(&quot;nObs&quot; = length(x[,&quot;scientificName&quot;]), &quot;nYears&quot; = length(unique(x[,&quot;year&quot;])), &quot;nSpp&quot; = length(unique(x[,&quot;scientificName&quot;])) ) ) } ) dataRes &lt;- as.data.frame(dplyr::bind_rows(dataRes, .id = &quot;gridID&quot;)) res[wNonEmpty,] &lt;- dataRes[,-1] resSf &lt;- st_as_sf(data.frame(res, st_geometry(grid))) And finally plot the grid summary as a map: palBW &lt;- leaflet::colorNumeric(c(&quot;white&quot;, &quot;navyblue&quot;), c(0, max(resSf$nSpp, na.rm = TRUE)), na.color = &quot;transparent&quot;) oldpar &lt;- par() par(mar = c(1,1,0,0)) plot(resSf$geometry, col = palBW(resSf$nSpp), border = NA) plot(swe_wgs84$Border$geometry, border = 1, lwd = 1, add = T) legend(&quot;bottomleft&quot;, legend = round(seq(0, max(resSf$nSpp, na.rm = TRUE), length.out = 5)), col = palBW(seq(0, max(resSf$nSpp, na.rm = TRUE), length.out = 5)), title = &quot;Number of \\nspecies&quot;, pch = 15, bty=&quot;n&quot;) par(oldpar) We may now ask whether species richness varies across latitude. So we go further by arranging the observations by latitude: library(dplyr) library(tidyr) xgridded &lt;- xf |&gt; mutate(longitude = round(decimalLongitude * 4)/4, latitude = round(decimalLatitude * 4)/4) |&gt; group_by(longitude,latitude) |&gt; ## subset to vars of interest select(longitude, latitude, scientificName) |&gt; ## take one row per cell per species (presence) distinct() |&gt; ## calculate species richness mutate(richness = n()) |&gt; ## convert to wide format (sites by species) mutate(present = 1) |&gt; do(tidyr::pivot_wider(data = ., names_from = scientificName, values_from = present, values_fill = 0)) |&gt; ungroup() ## where a species was not present, it will have NA: convert these to 0 sppcols &lt;- setdiff(names(xgridded), c(&quot;longitude&quot;, &quot;latitude&quot;, &quot;richness&quot;)) xgridded &lt;- xgridded |&gt; mutate_at(sppcols, function(z) ifelse(is.na(z), 0, z)) And plot it accordingly: library(ggplot2) ggplot(xgridded, aes(latitude, richness)) + labs(x = &quot;Latitude (º)&quot;, y = &quot;Species richness&quot;) + lims(y = c(0,20)) + geom_point() + theme_bw() "],["example-with-opportunistic-data-on-dragonflies.html", "2 Example with opportunistic data on Dragonflies 2.1 Name searching 2.2 Filter the search to get the observations 2.3 Quality and fit-for-use check 2.4 Species trends", " 2 Example with opportunistic data on Dragonflies In this example we are interested in exploring opportunistically collected data from the Swedish citizen science species observation portal - Artportalen. 2.1 Name searching To begin with, we want be sure there is an unequivocal way to find the species within the order Odonata (dragonflies) and nothing else, so let’s search for “odonata”: sx &lt;- sbdi_call() |&gt; sbdi_identify(&quot;Odonata&quot;) |&gt; group_by(species) |&gt; atlas_counts() Now we can download the taxonomic data (note that the search is case-sensitive): tx &lt;- sbdi_call() |&gt; sbdi_identify(&quot;Odonata&quot;) |&gt; atlas_species() |&gt; select(&quot;taxon_concept_id&quot;, &quot;species_name&quot;, &quot;taxon_rank&quot;,&quot;order&quot;, &quot;family&quot;,&quot;genus&quot;, &quot;vernacular_name&quot;) You can save the tx object as the complete species list for later use. 2.2 Filter the search to get the observations We start by searching for the data resource we are interested in using the function pick_filter(). This is an interactive query guiding you through the many resources available to filtering your query (data resources, spatial layers, and curated species lists). # follow the instructions fq_str &lt;- pick_filter(&quot;resource&quot;) Follow the instructions. Your choices here would have been “in3” –&gt; “dr5”. Your variable fq_str will now contain a string “data_resource_uid:dr5”. NOTE: the function pick_filter() is temporarily disabled until it could be adapted to the new galah framework. We also want to filter spatially for Southern Sweden (Götaland). Vector spatial layers (eg. polygons) can be imported in a number of different ways. SBDI APIs take as search input polygons in the so-called WKT Well Known Text format. So the first step is to load a vector layer and transform it into a WKT string. You could instead use the data we provided in the sbdi4r2 package data(\"swe\"). data(&quot;swe&quot;,package = &quot;sbdi4r2&quot;) wGotaland &lt;- swe$Counties$LnNamn %in% c(&quot;Blekinge&quot;, &quot;Gotlands&quot;, &quot;Hallands&quot;, &quot;Jönköpings&quot;, &quot;Kalmar&quot;, &quot;Kronobergs&quot;, &quot;Östergötlands&quot;, &quot;Skåne&quot;, &quot;Västra Götalands&quot;) gotaland_c &lt;- swe$Counties[wGotaland,] There are details about this polygon that we need to take care before. The WKT string should not be too long to be accepted by the API service. Also, the polygon we just got is projected in the coordinate system SWEREF99 TM, and the API service only accepts coordinates in a geodesic coordinate system WGS84. Let’s construct the WKT string: # transform the CRS gotaland_c &lt;- st_transform(gotaland_c, crs = st_crs(4326)) # disolve the counties into one polygon gotaland &lt;- st_union(gotaland_c) # create a convex hull of the polygon to simplify the geometry and # reduce the length of the WKT string gotaland_ch &lt;- st_convex_hull(gotaland) # create WKT string wkt &lt;- st_as_text(gotaland_ch) The WKT string then looks like this: ## [1] &quot;POLYGON ((11.13145 59.01184, 11.13161 58.90942, 11.25342 58.35786, 11.25893 58.34821, 12.81633 55.38594, 13.33575 55.34003, 14.19057 55.38557, 16.40805 56.20229, 18.30044 56.9528, 18.3725 57.00678, 18.86704 57.39753, 18.90037 57.44014, 19.3058 57.96888, 19.2889 57.99043, 15.79383 59.03876, 12.23104 59.27357, 12.06197 59.27159, 11.94833 59.26237, 11.82032 59.23553, 11.31566 59.11651, 11.21142 59.0897, 11.13145 59.01184))&quot; Next, we download the observations using the command sbdi_call(), but this time using sbdi_geolocate() to pass the search area. xf &lt;- sbdi_call() |&gt; sbdi_identify(&quot;Odonata&quot;) |&gt; sbdi_geolocate(wkt, type = &quot;polygon&quot;) |&gt; filter(dataResourceUid == &quot;dr5&quot;, year &gt;= 2010, year &lt;= 2020) |&gt; select(locality, recordedBy, taxonRank, group = &quot;basic&quot;) |&gt; atlas_occurrences() ## Request for 107107 occurrences placed in queue ## Current queue length: 1 ## ---- ## Downloading save(xf, file = &quot;an_appropriate_name.rdata&quot;) load(file = &quot;an_appropriate_name.rdata&quot;) 2.3 Quality and fit-for-use check Before we can use the observation records we need to know if the observation effort (sampling effort) has varied over time and in space. We can approximate observation effort from the data by defining field visits i.e. occasions at which an observer has sampled observations. We reconstruct field visits (that is, assign each observation a visitUID) using using the package BIRDS. Additionally we want the data to be summarized over a grid of 25 km (provided through the sbdi4r2 package). The following functions will perform many different summaries at the same time. Please refer to the BIRDS package documentation for more detail. remotes::install_github(&quot;Greensway/BIRDS&quot;) library(BIRDS) OB &lt;- organiseBirds(xf, sppCol = &quot;scientificName&quot; , # We only want observations identified at the species level taxonRankCol = &quot;taxonRank&quot;, taxonRank = &quot;species&quot;, # the visits are defined by collector and named locality idCols = c(&quot;locality&quot;, &quot;recordedBy&quot;), timeCols = &quot;eventDate&quot;, xyCols = c(&quot;decimalLongitude&quot;,&quot;decimalLatitude&quot;) ) # We don&#39;t need the whole grid, just the piece that overlaps our searching polygon wInt &lt;- unlist(st_intersects(gotaland, Sweden_Grid_25km_Wgs84)) gotaland_grid25 &lt;- Sweden_Grid_25km_Wgs84[wInt,] SB &lt;- summariseBirds(OB, grid = gotaland_grid25, spillOver = &quot;unique&quot;) Once summarised, we can see over space and for a few selected years how the number of observations is distributed: maxC &lt;- max(SB$spatial$nObs, na.rm = TRUE) palBW &lt;- leaflet::colorNumeric(c(&quot;white&quot;, &quot;navyblue&quot;), c(0, maxC), na.color = &quot;transparent&quot;) oldpar &lt;- par() par(mar = c(1,1,1,1), mfrow=c(1,3)) plot(SB$spatial$geometry, col=palBW(SB$spatial$nObs), border = &quot;grey&quot;, main=&quot;All years&quot;) ## with palette legend(&quot;bottomleft&quot;, inset = c(0,0.05), legend = round(seq(0, maxC, length.out = 5)), col = palBW(seq(0, maxC, length.out = 5)), title = &quot;Number of \\nobservations&quot;, pch = 15, bty=&quot;n&quot;) ## or export other combinations, e.g. one map per observed year yearlySp &lt;- exportBirds(SB, dimension = &quot;spatial&quot;, timeRes = &quot;yearly&quot;, variable = &quot;nObs&quot;, method = &quot;sum&quot;) maxC &lt;- max(yearlySp$&#39;2010&#39;, na.rm = TRUE) palBW &lt;- leaflet::colorNumeric(c(&quot;white&quot;, &quot;navyblue&quot;), c(0, maxC), na.color = &quot;transparent&quot;) plot(yearlySp$geometry, col = palBW(yearlySp$&#39;2010&#39;), border = &quot;grey&quot;,main = &quot;2010&quot;) legend(&quot;bottomleft&quot;, inset = c(0,0.05), legend = round(seq(0, maxC, length.out = 5)), col = palBW(seq(0, maxC, length.out = 5)), border = &quot;grey&quot;, title = &quot;Number of \\nobservations&quot;, pch = 15, bty = &quot;n&quot;) maxC &lt;- max(yearlySp$&#39;2020&#39;, na.rm = TRUE) palBW &lt;- leaflet::colorNumeric(c(&quot;white&quot;, &quot;navyblue&quot;), c(0, maxC), na.color = &quot;transparent&quot;) plot(yearlySp$geometry, col = palBW(yearlySp$&#39;2020&#39;), border = &quot;grey&quot;,main = &quot;2020&quot;) legend(&quot;bottomleft&quot;, inset = c(0,0.05), legend = round(seq(0, maxC, length.out = 5)), col = palBW(seq(0, maxC, length.out = 5)), border = &quot;grey&quot;, title = &quot;Number of \\nobservations&quot;, pch = 15, bty=&quot;n&quot;) par(oldpar) We now want to use the number of field visits as the measure for sampling effort. : library(cowplot) library(ggplot2) library(colorRamps) library(gridExtra) vis &lt;- ggplot(data = SB$spatial, aes( fill = nVis)) + geom_sf() + ggtitle(&quot;Visits&quot;) + scale_fill_gradient(low = &quot;#56B1F7&quot;, high = &quot;#132B43&quot;, na.value = NA) + theme(plot.margin = margin(1, 1, 1, 1, &quot;pt&quot;)) + theme_cowplot() spp &lt;- ggplot(data = SB$spatial, aes( fill = nSpp)) + geom_sf() + ggtitle(&quot;Number of species&quot;) + scale_fill_gradient(low = &quot;#56B1F7&quot;, high = &quot;#132B43&quot;, na.value = NA) + theme(plot.margin = margin(1, 1, 1, 1, &quot;pt&quot;)) + theme_cowplot() grid.arrange(vis, spp, ncol = 2) 2.3.0.1 Temporal check We see that SB contains an element called SB$temporal that contains a daily time series with time-specific rows when there is information. xts also supports day time, but dating below day resolution is not yet implemented in the BIRDS package. sb.xts &lt;- SB$temporal head(sb.xts, 5) ## nObs nVis nSpp ## 2010-03-22 3 3 2 ## 2010-03-27 1 1 1 ## 2010-04-02 2 1 2 ## 2010-04-03 6 2 5 ## 2010-04-12 7 6 2 Sub-setting is convenient in xts as you can do it with its dates and with a / for a range of dates. sb.xts[&quot;2010-09-07&quot;] #a specific day ## nObs nVis nSpp ## 2010-09-07 19 10 12 sb.xts[&quot;2010-09-01/2010-09-15&quot;] #for a period ## nObs nVis nSpp ## 2010-09-01 46 19 14 ## 2010-09-02 28 14 12 ## 2010-09-03 23 10 10 ## 2010-09-04 56 18 18 ## 2010-09-05 73 26 11 ## 2010-09-06 16 4 9 ## 2010-09-07 19 10 12 ## 2010-09-08 13 6 8 ## 2010-09-09 32 12 14 ## 2010-09-10 2 2 1 ## 2010-09-11 16 9 8 ## 2010-09-12 20 10 8 ## 2010-09-13 14 5 9 ## 2010-09-15 3 3 2 sb.xts[&quot;2010-09&quot;] #a specific month ## nObs nVis nSpp ## 2010-09-01 46 19 14 ## 2010-09-02 28 14 12 ## 2010-09-03 23 10 10 ## 2010-09-04 56 18 18 ## 2010-09-05 73 26 11 ## 2010-09-06 16 4 9 ## 2010-09-07 19 10 12 ## 2010-09-08 13 6 8 ## 2010-09-09 32 12 14 ## 2010-09-10 2 2 1 ## 2010-09-11 16 9 8 ## 2010-09-12 20 10 8 ## 2010-09-13 14 5 9 ## 2010-09-15 3 3 2 ## 2010-09-17 3 2 3 ## 2010-09-18 9 5 5 ## 2010-09-19 12 7 5 ## 2010-09-21 3 2 3 ## 2010-09-22 4 4 2 ## 2010-09-23 3 3 2 ## 2010-09-24 10 5 5 ## 2010-09-25 7 4 6 ## 2010-09-26 7 6 2 ## 2010-09-28 2 2 2 ## 2010-09-29 5 3 4 ## 2010-09-30 2 2 2 The package xts has several tools for converting to different time periods. Here we use apply.monthly to obtain the total number of observations and visits per month. The plot command for an object of calss xts provides a many features. This makes it fairly easy to customize your plots. Read more in ?plot.xts. library(xts) obs.m &lt;- apply.monthly(sb.xts$nObs, &quot;sum&quot;, na.rm = TRUE) vis.m &lt;- apply.monthly(sb.xts$nVis, &quot;sum&quot;, na.rm = TRUE) plot(obs.m, col = &quot;darkblue&quot;, grid.ticks.on = &quot;month&quot;, major.ticks = &quot;year&quot;, grid.col = &quot;lightgrey&quot;, main = &quot;Total number of daily observations and visits per month&quot;) lines(vis.m, col = &quot;orange&quot;, lwd = 2, on = 1) 2.4 Species trends We can now look at some particular species and ask whether those have changed in occurrence over time: speciesSummary(SB)[,1:4] ## species nCells nObs nVis ## 1 Aeshna affinis 11 166 154 ## 2 Aeshna caerulea 11 31 30 ## 3 Aeshna cyanea 186 3930 3804 ## 4 Aeshna grandis 197 6001 5896 ## 5 Aeshna isoceles 42 475 469 ## 6 Aeshna juncea 156 1302 1261 ## 7 Aeshna mixta 145 2693 2618 ## 8 Aeshna serrata 19 135 126 ## 9 Aeshna subarctica 63 329 318 ## 10 Aeshna viridis 59 225 194 ## 11 Anax ephippiger 6 15 15 ## 12 Anax imperator 103 2612 2470 ## 13 Anax parthenope 31 276 272 ## 14 Brachytron pratense 158 1668 1619 ## 15 Calopteryx splendens 145 2419 2279 ## 16 Calopteryx virgo 164 3742 3577 ## 17 Coenagrion armatum 54 235 216 ## 18 Coenagrion hastulatum 166 2532 2458 ## 19 Coenagrion johanssoni 28 136 129 ## 20 Coenagrion lunulatum 104 487 462 ## 21 Coenagrion puella 179 3725 3567 ## 22 Coenagrion pulchellum 177 3708 3586 ## 23 Cordulegaster boltonii 113 1178 1164 ## 24 Cordulia aenea 178 3579 3516 ## 25 Crocothemis erythraea 2 13 13 ## 26 Enallagma cyathigerum 193 5498 5190 ## 27 Epitheca bimaculata 56 290 277 ## 28 Erythromma najas 160 2438 2354 ## 29 Erythromma viridulum 37 546 505 ## 30 Gomphus vulgatissimus 99 770 752 ## 31 Ischnura elegans 171 3586 3456 ## 32 Ischnura pumilio 60 399 364 ## 33 Lestes barbarus 3 43 39 ## 34 Lestes dryas 90 614 584 ## 35 Lestes sponsa 184 4699 4457 ## 36 Lestes virens 90 683 651 ## 37 Leucorrhinia albifrons 131 747 712 ## 38 Leucorrhinia caudalis 116 464 444 ## 39 Leucorrhinia dubia 129 1109 1078 ## 40 Leucorrhinia pectoralis 140 1061 1035 ## 41 Leucorrhinia rubicunda 153 1488 1442 ## 42 Libellula depressa 174 2664 2574 ## 43 Libellula fulva 24 293 268 ## 44 Libellula quadrimaculata 198 6949 6837 ## 45 Nehalennia speciosa 11 108 103 ## 46 Onychogomphus forcipatus 100 937 919 ## 47 Ophiogomphus cecilia 11 13 13 ## 48 Orthetrum cancellatum 181 3806 3659 ## 49 Orthetrum coerulescens 113 1069 1020 ## 50 Platycnemis pennipes 128 1460 1404 ## 51 Pyrrhosoma nymphula 169 3146 3074 ## 52 Somatochlora arctica 61 192 180 ## 53 Somatochlora flavomaculata 133 1065 1050 ## 54 Somatochlora metallica 161 1718 1699 ## 55 Sympecma fusca 106 860 839 ## 56 Sympetrum danae 182 2998 2895 ## 57 Sympetrum flaveolum 146 1012 980 ## 58 Sympetrum fonscolombii 48 359 341 ## 59 Sympetrum pedemontanum 2 143 127 ## 60 Sympetrum sanguineum 189 4841 4644 ## 61 Sympetrum striolatum 146 1468 1417 ## 62 Sympetrum vulgatum 177 3431 3275 We pick two species and compare their trends in number of visits where the species where reported, relative to the total number of visits. library(dplyr) sppCount &lt;- obsData(OB) |&gt; group_by(year, visitUID) |&gt; summarise(&quot;focalCountLq&quot; = sum(scientificName == &quot;Libellula quadrimaculata&quot;), &quot;focalCountSd&quot; = sum(scientificName == &quot;Sympetrum sanguineum&quot;), &quot;sppLength&quot; = length(unique(scientificName)), .groups = &quot;drop&quot;) |&gt; ungroup() |&gt; group_by(year) |&gt; summarise(&quot;focalCountLq&quot; = sum(focalCountLq), &quot;focalCountSd&quot; = sum(focalCountSd), &quot;nVis&quot; = length(unique(visitUID)), &quot;relCountLq&quot; = focalCountLq / nVis, &quot;relCountSd&quot; = focalCountSd / nVis, .groups = NULL) oldpar &lt;- par(no.readonly = TRUE) plot(sppCount$year, sppCount$relCountLq, type = &quot;l&quot;, lwd = 3, xlab = &quot;Year&quot;, ylab = &quot;Relative number of visits with observations&quot;, ylim = c(0, max(sppCount$relCountLq)), xaxp = c(2000, 2010, 10)) lines(sppCount$year, sppCount$relCountSd, lwd = 3, col = &quot;#78D2EB&quot;) legend(&quot;bottomright&quot;, legend = c(&quot;Libellula quadrimaculata&quot;,&quot;Sympetrum sanguineum&quot;), text.font = 3, col = c(&quot;black&quot;, &quot;#78D2EB&quot;), lwd = 3, bty = &quot;n&quot;) par(oldpar) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
