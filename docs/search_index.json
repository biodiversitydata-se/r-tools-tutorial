[["index.html", "Tutorial for using R tools for analysis of primary biodiversity data provided by SBDI Introduction R and Mirroreum SBDI4R - R package to search an access data Customizing SBDI4R Other packages needed Your collaboration is appreciated", " Tutorial for using R tools for analysis of primary biodiversity data provided by SBDI Debora Arlt and Alejandro Ruete for the Swedish Biodiversity Data Infrastructure 2021-05-26 Introduction Biodiversity resources are increasingly international. The SBDI has made an effort to canalize biodiversity data and resources to help the research community access and analyze Swedish primary biodiversity data. Each research question draws its own challenges which are unique in themselves. Our aim here is to provide a few examples that prompt questions that may be asked at different stages of the process. The validity and appropriateness of a particular method depends on the individual researcher(s). For a comprehensive workflow on how to treat and analyze PBD please refer to our tutorial on biodiversity analysis tool where we go through the complete workflow Data &gt; Cleaning &gt; Fitness evaluation &gt; Analysis R and Mirroreum The present tutorial is focused on the statistical programming language R. R is a free software environment for statistical computing and graphics that is widely used within the scientific community and where the complete analysis workflow can be documented in a fully reproducible way. At SBDI we provide access for researchers and students to Mirroreum  an online web-based environment for Reproducible Open Research in the area of biodiversity analysis. Mirroreum is based on a Free and Open Source stack of software. Logging in, you immediately get access to a web-based version of R Studio with a large number of pre-installed packages such as all the packages offered from ROpenSci and more. Compared to running R Studio on your own machine, Mirroreum offers more computational resources and a standardized environment where you can rely on all the relevant packages being installed and the configuration parameters being set appropriately. To know more about Mirroreum or to request an account please visit the SBDI documentation site SBDI4R - R package to search an access data The SBDI4R package enables the R community to directly access data and resources hosted by SBDI. The goal is to enable observations of species to be queried and output in a range of standard formats. It includes some filter functions that allow you to filter prior to download. It also includes some simple summary functions, and some function for some simple data exploration. The examples included in this tutorial also show you how you can continue exploring and analyzing using other R package. Please refer to the package documentation for details on how to install it. Once installed the SBDI4R package must be loaded for each new R session: library(SBDI4R) #&gt; Error in SBDI4R::sbdi_config(cache_directory = file.path(&quot;~&quot;, &quot;sbdi_cache&quot;), : #&gt; cache directory ~/sbdi_cache does not exist Customizing SBDI4R Various aspects of the SBDI4R package can be customized. Caching SBDI4R can cache most results to local files. This means that if the same code is run multiple times, the second and subsequent iterations will be faster. This will also reduce load on the web servers. By default, this caching is session-based, meaning that the local files are stored in a temporary directory that is automatically deleted when the R session is ended. This behaviour can be altered so that caching is permanent, by setting the caching directory to a non-temporary location. For example, under Windows, use something like: sbdi_config(cache_directory = file.path(&quot;c:&quot;,&quot;mydata&quot;,&quot;sbdi_cache&quot;)) ## Windows or for Linux: sbdi_config(cache_directory = &quot;~/mydata/sbdi_cache&quot;) ## Linux Note that this directory must exist (you need to create it yourself). All results will be stored in that cache directory and will be used from one session to the next. They wont be re-downloaded from the server unless the user specifically deletes those files or changes the caching setting to refresh. If you change the cache_directory to a permanent location, you may wish to add something like this to your .Rprofile file, so that it happens automatically each time the SBDI4R package is loaded: setHook(packageEvent(&quot;SBDI4R&quot;, &quot;onLoad&quot;), function(...) sbdi_config(cache_directory=file.path(&quot;~&quot;,&quot;mydata&quot;,&quot;sbdi_cache&quot;))) Caching can also be turned off entirely by: sbdi_config(caching=&quot;off&quot;) or set to refresh, meaning that the cached results will re-downloaded from the SBDI servers and the cache updated. (This will happen for as long as caching is set to refresh  so you may wish to switch back to normal on caching behavior once you have updated your cache with the data you are working on). E-mail address Each download request to SBDI servers is also accompanied by an e-mail address string that identifies the user making the request. You will need to provide an email address registered with the SBDI. You can create an account here. Once an email is registered with the SBDI, it should be stored in the config: sbdi_config(email=&quot;your.valid@emailaddress.com&quot;) Else you can provide this e-mail address as a parameter directly to each call of the function occurrences(). Setting the download reason SBDI requires that you provide a reason when downloading occurrence data (via the SBDI4R occurrences() function). You can provide this as a parameter directly to each call of occurrences(), or you can set it once per session using: sbdi_config(download_reason_id = &quot;your_reason_id&quot;) (See sbdi_reasons() for valid download reasons, e.g. * 3 for education, * 7 for ecological research, * 8 for systematic research/taxonomy, * 10 for testing) NO other personal identification information is sent. You can see all configuration settings, including the the user-agent string that is being used, with the command: sbdi_config() Other options If you make a request that returns an empty result set (e.g. an un-matched name), by default you will simply get an empty data structure returned to you without any special notification. If you would like to be warned about empty result sets, you can use: sbdi_config(warn_on_empty=TRUE) Other packages needed Some additional packages are needed for these examples. Install them if necessary with the following script. to_install &lt;- c(&quot;dplyr&quot;, &quot;BIRDS&quot;,&quot;ggplot2&quot;, &quot;jpeg&quot;, &quot;leaflet&quot;,&quot;maps&quot;, &quot;mapdata&quot;, &quot;maptools&quot;, &quot;sp&quot;, &quot;rgeos&quot;, &quot;tidyr&quot;, &quot;vegan&quot;) to_install &lt;- to_install[!sapply(to_install, requireNamespace, quietly=TRUE)] if(length(to_install)&gt;0) install.packages(to_install, repos=&quot;http://cran.us.r-project.org&quot;) Your collaboration is appreciated Open Source also means that you can contribute. You dont need to know how to program but every input is appreciated. Did you find something that is not working? Have suggestions for examples or text? you can always 1. Reach to us via the support center 2. Submit and issue to the GitHub code repository see how 3. Or contribute with your code or documents modifications by forking the code and submitting a pull request The repositories you can contribute to are: * Mirroreum https://github.com/mskyttner/mirroreum * SBDI4R https://github.com/biodiversitydata-se/SBDI4R (NOTE: we may not develop this package but instead move to a new one) * the general analysis workflows [https://github.com/biodiversitydata-se/biodiversity-analysis-tools] https://github.com/biodiversitydata-se/biodiversity-analysis-tools * these tutorial https://github.com/biodiversitydata-se/r-tools-tutorial "],["example-with-fish-data-from-sers.html", "1 Example with fish data from SERS 1.1 Plotting data on a map 1.2 Temporal summary 1.3 Species summary 1.4 Spatial biodiversity analysis 1.5 Temporal biodiversity analysis 1.6 Links to further tutorials that could be of interest", " 1 Example with fish data from SERS In this example we are interested in exploring data from a specific data resource  Swedish Electrofishing Registry - SERS (Institutionen f√∂r akvatiska resurser, SLU). This data base has 2.8 M observations starting in the 1950s. As you may already know, SBDI is a collection of many biodiversity databases. We start by searching for the data resource we are interested in using the function pick_filter(). This is an interactive query guiding you through the many resources available to filtering your query (data resources, spatial layers, and curated species lists). library(SBDI4R) fq_str &lt;- pick_filter(&quot;resource&quot;) # follow the instructions Follow the instruction. Your choices here would have been in3 &gt; dr10. Your variable fq_str will now contain a string data_resource_uid:dr10. But we are not interested in the complete database, but on the last 10 years of data. for this we concatenate (add to a vector) another filter string. These will be treated as AND factors. y1 &lt;- 2008 y2 &lt;- 2012 fq_str &lt;- c(fq_str, paste0(&quot;year:[&quot;, y1, &quot; TO &quot;, y2,&quot;]&quot;)) # Note the square brackets are hard limits For references on how to use the filters see SBDI APIS documentation. Using the function occurrences() we can the query for the observations fulfilling our filter. If you havent specified that in the sbdi_config() before, you need to pass your email and the download reason. library(SBDI4R) xf &lt;- occurrences(fq = fq_str, email = &quot;sbdi4r-test@biodiversitydata.se&quot;, download_reason_id = 10) # Simply summarise all records by data source table(xf$data$dataResourceName) #&gt; #&gt; SLU Aqua Institute of Freshwater Research Swedish Electrofishing Registry - SERS #&gt; 95082 table(xf$data$dataResourceID) #&gt; #&gt; dr10 #&gt; 95082 1.1 Plotting data on a map You can quickly plot all the observations as a PDF file with the function ocurrence_plot(), one page per species: occurrences_plot(xf, &quot;obsPlot.pdf&quot;, grouped=FALSE, taxon_level=&quot;species&quot;, pch=&#39;+&#39;) Note that the plot is saved to a pdf file in the current working directory. You can find that with getwd(). 1.1.0.1 Leaflet There are many other ways of producing spatial plots in R. The leaflet package provides a simple method of producing browser-based maps with panning, zooming, and background layers: library(leaflet) # drop any records with missing lat/lon values xfl &lt;- xf$data[!is.na(xf$data$longitude) | !is.na(xf$data$latitude),] marker_colour &lt;- rep(&quot;#d95f02&quot;, nrow(xfl)) # blank map, with imagery background leaflet(width = &quot;100%&quot;) %&gt;% addProviderTiles(&quot;Esri.WorldImagery&quot;) %&gt;% # add markers addCircleMarkers(xfl$longitude, xfl$latitude, radius = 1, fillOpacity =.5, opacity = 1, col=marker_colour, clusterOptions = markerClusterOptions()) 1.2 Temporal summary A quick summary over the years reveal a drop in number of records over time. table(xf$data$year) #&gt; #&gt; 2008 2009 2010 2011 2012 #&gt; 18168 19674 20055 17188 19997 hist(xf$data$year, breaks = seq(y1, y2), xlab = &quot;Year&quot;, main = &quot;&quot;) 1.3 Species summary In the same way we can summaries the number of observations for each species, by common or scientific name. sppTab &lt;- table(xf$data$commonName) sppDF &lt;- as.data.frame(sppTab) colnames(sppDF)[1] &lt;- &quot;species&quot; sppDF #&gt; species Freq #&gt; 1 66 #&gt; 2 Alpine bullhead 4615 #&gt; 3 American burbot 7081 #&gt; 4 Aral asp 6 #&gt; 5 Arctic char 46 #&gt; 6 aurora trout 856 #&gt; 7 Baltic flounder 116 #&gt; 8 Baltic vimba 9 #&gt; 9 bleak 660 #&gt; 10 brook lamprey 2220 #&gt; 11 brown trout 25180 #&gt; 12 Bullhead 9702 #&gt; 13 carps 60 #&gt; 14 Chub 287 #&gt; 15 common carp, carp 6 #&gt; 16 Common dace 93 #&gt; 17 crucian carp 35 #&gt; 18 eel 2140 #&gt; 19 European pike-perch 12 #&gt; 20 European whitefish 18 #&gt; 21 grayling 3660 #&gt; 22 gudgeon 167 #&gt; 23 ide, orfe 103 #&gt; 24 lampreys 931 #&gt; 25 Miller&#39;s thumbs 377 #&gt; 26 minnow 10999 #&gt; 27 noble crayfish 618 #&gt; 28 Norway lobsters 100 #&gt; 29 perch 3660 #&gt; 30 pike 4854 #&gt; 31 plaice 4 #&gt; 32 Pope 310 #&gt; 33 rain bleak 12 #&gt; 34 rainbow trout 14 #&gt; 35 river lamprey, lampern 122 #&gt; 36 roach 3049 #&gt; 37 rudd 23 #&gt; 38 salmon 7221 #&gt; 39 salmonids 19 #&gt; 40 sand goby 2 #&gt; 41 sea lamprey 8 #&gt; 42 signal crayfish 4096 #&gt; 43 smelt 3 #&gt; 44 spined loach 3 #&gt; 45 sticklebacks 66 #&gt; 46 stone loach 620 #&gt; 47 ten-spined stickleback, nine-spined stickleback 441 #&gt; 48 tench 108 #&gt; 49 three-spined stickleback 178 #&gt; 50 wels 32 #&gt; 51 white bream 74 sppTab &lt;- table(xf$data$scientificName) sppDF &lt;- as.data.frame(sppTab) colnames(sppDF)[1] &lt;- &quot;species&quot; sppDF #&gt; species Freq #&gt; 1 Abramis brama (Linnaeus, 1758) 61 #&gt; 2 Alburnus alburnus (Linnaeus, 1758) 660 #&gt; 3 Anguilla anguilla (Linnaeus, 1758) 2140 #&gt; 4 Astacidae 100 #&gt; 5 Astacus astacus (Linnaeus, 1758) 618 #&gt; 6 Barbatula barbatula (Linnaeus, 1758) 620 #&gt; 7 Blicca bjoerkna (Linnaeus, 1758) 74 #&gt; 8 Carassius carassius (Linnaeus, 1758) 35 #&gt; 9 Cobitis taenia Linnaeus, 1758 3 #&gt; 10 Coregonus albula albula 5 #&gt; 11 Coregonus maraena (Bloch, 1779) 18 #&gt; 12 Cottus gobio Linnaeus, 1758 9702 #&gt; 13 Cottus Linnaeus, 1758 377 #&gt; 14 Cottus poecilopus Heckel, 1840 4615 #&gt; 15 Cyprinidae 60 #&gt; 16 Cyprinus carpio Linnaeus, 1758 6 #&gt; 17 Esox lucius Linnaeus, 1758 4854 #&gt; 18 Gasterosteidae 66 #&gt; 19 Gasterosteus aculeatus Linnaeus, 1758 178 #&gt; 20 Gobio gobio (Linnaeus, 1758) 167 #&gt; 21 Gymnocephalus cernua (Linnaeus, 1758) 310 #&gt; 22 Lampetra fluviatilis (Linnaeus, 1758) 122 #&gt; 23 Lampetra planeri (Bloch, 1784) 2220 #&gt; 24 Leucaspius delineatus (Heckel, 1843) 12 #&gt; 25 Leuciscus aspius (Linnaeus, 1758) 6 #&gt; 26 Leuciscus idus (Linnaeus, 1758) 103 #&gt; 27 Leuciscus leuciscus (Linnaeus, 1758) 93 #&gt; 28 Lota lota (Linnaeus, 1758) 7081 #&gt; 29 Oncorhynchus mykiss (Walbaum, 1792) 14 #&gt; 30 Osmerus eperlanus (Linnaeus, 1758) 3 #&gt; 31 Pacifastacus leniusculus (Dana, 1852) 4096 #&gt; 32 Perca fluviatilis Linnaeus, 1758 3660 #&gt; 33 Petromyzon marinus Linnaeus, 1758 8 #&gt; 34 Petromyzontidae 931 #&gt; 35 Phoxinus phoxinus (Linnaeus, 1758) 10999 #&gt; 36 Platichthys flesus (Linnaeus, 1758) 116 #&gt; 37 Pleuronectes platessa Linnaeus, 1758 4 #&gt; 38 Pomatoschistus minutus (Pallas, 1770) 2 #&gt; 39 Pungitius pungitius (Linnaeus, 1758) 441 #&gt; 40 Rutilus rutilus (Linnaeus, 1758) 3049 #&gt; 41 Salmo Linnaeus, 1758 324 #&gt; 42 Salmo salar Linnaeus, 1758 6897 #&gt; 43 Salmo trutta Linnaeus, 1758 25180 #&gt; 44 Salmonidae 19 #&gt; 45 Salvelinus alpinus (Linnaeus, 1758) 46 #&gt; 46 Salvelinus fontinalis (Mitchill, 1814) 856 #&gt; 47 Sander lucioperca (Linnaeus, 1758) 12 #&gt; 48 Scardinius erythrophthalmus (Linnaeus, 1758) 23 #&gt; 49 Silurus glanis Linnaeus, 1758 32 #&gt; 50 Squalius cephalus (Linnaeus, 1758) 287 #&gt; 51 Thymallus thymallus (Linnaeus, 1758) 3660 #&gt; 52 Tinca tinca (Linnaeus, 1758) 108 #&gt; 53 Vimba vimba (Linnaeus, 1758) 9 Perhaps, you need to send this table as a .CSV file to a colleague. write.csv(sppDF, &quot;SERS_species_summary.csv&quot;) # NOTE: again this will be saved on your working directory 1.4 Spatial biodiversity analysis Lets now ask: how does the species richness vary across Sweden? In this case we want to summarise occurrences species-wise over a defined grid instead of plotting every observation point. First we need to overlay the observations with a grid. In this case, the standard Swedish grids at 50, 25, 10 and 5 km are provided as data in the SBDI4R package (with Coordinate Reference System = WGS84, EPSG:4326). library(sp) # the function coordinates() and proj4string() are in sp library(rgeos) # the function over() is in package rgeos # load some shapes over Sweden&#39;s political borders data(&quot;swe_wgs84&quot;, package=&quot;SBDI4R&quot;, envir=environment()) # A standard 50km grid data(&quot;Sweden_Grid_50km_Wgs84&quot;, package=&quot;SBDI4R&quot;, envir=environment()) grid &lt;- Sweden_Grid_50km_Wgs84 # make the observations spatial # NOTE: make sure there are no NAs on either column defining the coordinates # xf$data[!is.na(xf$data$longitude) | !is.na(xf$data$latitude),] obs &lt;- as.data.frame(xf$data) coordinates(obs) &lt;- obs[,c(&quot;longitude&quot;,&quot;latitude&quot;)] wkt &lt;- sf::st_crs(4326)[[2]] proj4string(obs) &lt;- sp::CRS(wkt) #CRS(&quot;+init=epsg:4326&quot;) nObs &lt;- nrow(obs) # overlay the data with the grid ObsInGridList &lt;- over(grid, obs, returnList=TRUE) wNonEmpty &lt;- unname( which( unlist(lapply(ObsInGridList, nrow)) != 0) ) if(length(wNonEmpty)==0) message(&quot;Observations don&#39;t overlap any grid cell.&quot;) The result ObsInGridList is a list object with a subset of the data on each grid. Now summarise occurrences within grid cells: # check n the total number of observations sum(unlist(lapply(ObsInGridList, nrow))) #&gt; [1] 95082 # apply a summary over the grid cells nCells &lt;- length(ObsInGridList) res &lt;- data.frame(&quot;nObs&quot;=as.numeric(rep(NA,nCells)), &quot;nYears&quot;=as.numeric(rep(NA,nCells)), &quot;nSpp&quot;=as.numeric(rep(NA,nCells)), row.names = row.names(grid), stringsAsFactors = FALSE) cols2use &lt;- c(&quot;scientificName&quot;, &quot;year&quot;) dataRes &lt;- lapply(ObsInGridList[wNonEmpty], function(x){ x &lt;- x[,cols2use] colnames(x) &lt;- c(&quot;scientificName&quot;, &quot;year&quot;) return(c(&quot;nObs&quot; = length(x[,&quot;scientificName&quot;]), &quot;nYears&quot; = length(unique(x[,&quot;year&quot;])), &quot;nSpp&quot; = length(unique(x[,&quot;scientificName&quot;])) ) ) } ) dataRes &lt;- as.data.frame(dplyr::bind_rows(dataRes, .id = &quot;gridID&quot;)) res[wNonEmpty,] &lt;- dataRes[,-1] resSp &lt;- sp::SpatialPolygonsDataFrame(grid, res) And finally plot the grid summary as a map: palBW &lt;- leaflet::colorNumeric(c(&quot;white&quot;, &quot;navyblue&quot;), c(0, max(resSp@data$nSpp, na.rm = TRUE)), na.color = &quot;transparent&quot;) oldpar &lt;- par() par(mar = c(1,1,0,0)) plot(resSp, col=palBW(resSp@data$nSpp), border = NA) plot(swe_wgs84$Border, border=1, lwd=1, add=T) legend(&quot;bottomleft&quot;, legend = round(seq(0, max(resSp@data$nSpp, na.rm = TRUE), length.out = 5)), col = palBW(seq(0, max(resSp@data$nSpp, na.rm = TRUE), length.out = 5)), title = &quot;Number of \\nspecies&quot;, pch = 15, bty=&quot;n&quot;) suppressWarnings(par(oldpar)) We can go further by gathering the observations by latitude. library(dplyr) library(tidyr) xgridded &lt;- xf$data %&gt;% ## discard genus- and higher-level records filter(rank %in% c(&quot;species&quot;, &quot;subspecies&quot;, &quot;variety&quot;, &quot;form&quot;, &quot;cultivar&quot;)) %&gt;% mutate(longitude = round(longitude * 4)/4, latitude = round(latitude * 4)/4) %&gt;% group_by(longitude,latitude) %&gt;% ## subset to vars of interest select(longitude, latitude, species) %&gt;% ## take one row per cell per species (presence) distinct() %&gt;% ## calculate species richness mutate(richness=n()) %&gt;% ## convert to wide format (sites by species) mutate(present=1) %&gt;% do(tidyr::pivot_wider(data=., names_from=species, values_from=present, values_fill=0)) %&gt;% ungroup() ## where a species was not present, it will have NA: convert these to 0 sppcols &lt;- setdiff(names(xgridded), c(&quot;longitude&quot;, &quot;latitude&quot;, &quot;richness&quot;)) xgridded &lt;- xgridded %&gt;% mutate_at(sppcols, function(z) ifelse(is.na(z), 0, z)) And plot it accordingly library(ggplot2) ggplot(xgridded, aes(latitude, richness)) + labs(x = &quot;Latitude (¬∫)&quot;, y = &quot;Species richness&quot;) + lims(y = c(0,20)) + geom_point() + theme_bw() 1.5 Temporal biodiversity analysis Despite the drop seen in sampling effort, we can still analyse weather there is any trends for species over the sampled years. To do this, we first need to check whether the spatial sampling effort was comparable across those years xf$data %&gt;% ## discard genus- and higher-level records filter(rank %in% c(&quot;species&quot;, &quot;subspecies&quot;, &quot;variety&quot;, &quot;form&quot;, &quot;cultivar&quot;)) %&gt;% group_by(year) %&gt;% ## subset to vars of interest select(year, locality) %&gt;% ## calculate species richness mutate(nObs = n()) #&gt; # A tibble: 93,205 x 3 #&gt; # Groups: year [5] #&gt; year locality nObs #&gt; &lt;int&gt; &lt;chr&gt; &lt;int&gt; #&gt; 1 2011 &quot;6846840-1568800 Sj√∂tr√∂sk. Lillfj.utl&quot; 16853 #&gt; 2 2009 &quot;6340000-1286200 G√∂ingeg√•rden&quot; 19300 #&gt; 3 2009 &quot;&quot; 19300 #&gt; 4 2011 &quot;6846840-1568800 Sj√∂tr√∂sk. Lillfj.utl&quot; 16853 #&gt; 5 2009 &quot;6339030-1288080 Holmag√§rde B st.v. 2&quot; 19300 #&gt; 6 2009 &quot;6339030-1288080 Holmag√§rde B stv. 2&quot; 19300 #&gt; # ... with 93,199 more rows And we ask: can we see a trend (change = frequency of occurrence = number caught) for species X, or species Y? 1.6 Links to further tutorials that could be of interest Link to analyses of interest  e.g. species distribution models, or trend analyses, or species divesity  link to biodiversity workflow "],["case-2.html", "2 Case 2:", " 2 Case 2: Look at opportunistically collected citizen science data  using the big Swedish cit science species observation data portal Artportalen. We want to look at dragonflies  but before we can use the observation records we need to know how the observation effort has varied over time and in space. For this we define field visits i.e. occasions at which an observer has sampled observations  if we have information on observer id, location id and date we can aggregate data into field visits. We do this using BIRDS, and 25km grid: Select data  get records for Southern Sweden (G√∂taland) and years 2000-2010. How has observation effort (frequency of visits) varied over time and space?  1) show maps as in Example 7 (all years, year 2000, 2002, 2004, 2006, 2008, 2010), 2 make also a time line plot with no. visits against years, no. of gridcells with visits against years. We can now look at some particular species and ask whether this has changed in occurrence over time: Plot no. records of species x and no. visits all species over years (we simply explore by comparing records for a species with no visits, can assume that species has increased of stronger positive trend than for no. visits) Plot no. gridcells with visits for species x and no. gridcells with visits for all species over years (we simply explore by comparing records for a species with no visits, can assume that species has increased of stronger positive trend than for no. visits) (species x: Tv√•fl√§ckad trollsl√§nda Epitheca bimaculata) "]]
