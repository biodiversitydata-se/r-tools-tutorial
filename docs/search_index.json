[["index.html", "Using R tools for analysis of primary biodiversity data provided by SBDI Introduction R and Mirroreum SBDI4R - R package to search an access data Customizing SBDI4R Other packages needed Your collaboration is appreciated", " Using R tools for analysis of primary biodiversity data provided by SBDI Debora Arlt and Alejandro Ruete for the Swedish Biodiversity Data Infrastructure 2021-05-28 Introduction Biodiversity resources are increasingly international. The SBDI has made an effort to canalize biodiversity data and resources to help the research community access and analyze Swedish primary biodiversity data. Each research question draws its own challenges which are unique in themselves. Our aim here is to provide a few examples that prompt questions that may be asked at different stages of the process. The validity and appropriateness of a particular method depends on the individual researcher(s). For a comprehensive workflow on how to treat and analyze PBD please refer to our tutorial on biodiversity analysis tool where we go through the complete workflow Data &gt; Cleaning &gt; Fitness evaluation &gt; Analysis R and Mirroreum The present tutorial is focused on the statistical programming language R. R is a free software environment for statistical computing and graphics that is widely used within the scientific community and where the complete analysis workflow can be documented in a fully reproducible way. At SBDI we provide access for researchers and students to Mirroreum  an online web-based environment for Reproducible Open Research in the area of biodiversity analysis. Mirroreum is based on a Free and Open Source stack of software. Logging in, you immediately get access to a web-based version of R Studio with a large number of pre-installed packages such as all the packages offered from ROpenSci and more. Compared to running R Studio on your own machine, Mirroreum offers more computational resources and a standardized environment where you can rely on all the relevant packages being installed and the configuration parameters being set appropriately. To know more about Mirroreum or to request an account please visit the SBDI documentation site SBDI4R - R package to search an access data The SBDI4R package enables the R community to directly access data and resources hosted by SBDI. The goal is to enable observations of species to be queried and output in a range of standard formats. It includes some filter functions that allow you to filter prior to download. It also includes some simple summary functions, and some function for some simple data exploration. The examples included in this tutorial also show you how you can continue exploring and analyzing using other R package. Please refer to the package documentation for details on how to install it. Once installed the SBDI4R package must be loaded for each new R session: library(SBDI4R) Customizing SBDI4R Various aspects of the SBDI4R package can be customized. Caching SBDI4R can cache most results to local files. This means that if the same code is run multiple times, the second and subsequent iterations will be faster. This will also reduce load on the web servers. By default, this caching is session-based, meaning that the local files are stored in a temporary directory that is automatically deleted when the R session is ended. This behaviour can be altered so that caching is permanent, by setting the caching directory to a non-temporary location. For example, under Windows, use something like: sbdi_config(cache_directory = file.path(&quot;c:&quot;,&quot;mydata&quot;,&quot;sbdi_cache&quot;)) ## Windows or for Linux: sbdi_config(cache_directory = &quot;~/mydata/sbdi_cache&quot;) ## Linux Note that this directory must exist (you need to create it yourself). All results will be stored in that cache directory and will be used from one session to the next. They wont be re-downloaded from the server unless the user specifically deletes those files or changes the caching setting to refresh. If you change the cache_directory to a permanent location, you may wish to add something like this to your .Rprofile file, so that it happens automatically each time the SBDI4R package is loaded: setHook(packageEvent(&quot;SBDI4R&quot;, &quot;onLoad&quot;), function(...) sbdi_config(cache_directory=file.path(&quot;~&quot;,&quot;mydata&quot;,&quot;sbdi_cache&quot;))) Caching can also be turned off entirely by: sbdi_config(caching=&quot;off&quot;) or set to refresh, meaning that the cached results will re-downloaded from the SBDI servers and the cache updated. (This will happen for as long as caching is set to refresh  so you may wish to switch back to normal on caching behavior once you have updated your cache with the data you are working on). E-mail address Each download request to SBDI servers is also accompanied by an e-mail address string that identifies the user making the request. You will need to provide an email address registered with the SBDI. You can create an account here. Once an email is registered with the SBDI, it should be stored in the config: sbdi_config(email=&quot;your.valid@emailaddress.com&quot;) Else you can provide this e-mail address as a parameter directly to each call of the function occurrences(). Setting the download reason SBDI requires that you provide a reason when downloading occurrence data (via the SBDI4R occurrences() function). You can provide this as a parameter directly to each call of occurrences(), or you can set it once per session using: sbdi_config(download_reason_id = &quot;your_reason_id&quot;) (See sbdi_reasons() for valid download reasons, e.g. * 3 for education, * 7 for ecological research, * 8 for systematic research/taxonomy, * 10 for testing) NO other personal identification information is sent. You can see all configuration settings, including the the user-agent string that is being used, with the command: sbdi_config() Other options If you make a request that returns an empty result set (e.g. an un-matched name), by default you will simply get an empty data structure returned to you without any special notification. If you would like to be warned about empty result sets, you can use: sbdi_config(warn_on_empty=TRUE) Other packages needed Some additional packages are needed for these examples. Install them if necessary with the following script. to_install &lt;- c(&quot;BIRDS&quot;,&quot;colorRamps&quot;, &quot;cowplot&quot;,&quot;dplyr&quot;,&quot;ggplot2&quot;, &quot;leaflet&quot;, &quot;maps&quot;, &quot;mapdata&quot;, &quot;maptools&quot;, &quot;sf&quot;, &quot;sp&quot;, &quot;rgeos&quot;, &quot;tidyr&quot;, &quot;xts&quot;) to_install &lt;- to_install[!sapply(to_install, requireNamespace, quietly=TRUE)] if(length(to_install)&gt;0) install.packages(to_install, repos=&quot;http://cran.us.r-project.org&quot;) Your collaboration is appreciated Open Source also means that you can contribute. You dont need to know how to program but every input is appreciated. Did you find something that is not working? Have suggestions for examples or text? you can always Reach to us via the support center Submit and issue to the GitHub code repository see how Or contribute with your code or documents modifications by forking the code and submitting a pull request The repositories you can contribute to are: Mirroreum https://github.com/mskyttner/mirroreum SBDI4R https://github.com/biodiversitydata-se/SBDI4R (NOTE: we may not develop this package but instead move to a new one) the general analysis workflows https://github.com/biodiversitydata-se/biodiversity-analysis-tools these tutorial https://github.com/biodiversitydata-se/r-tools-tutorial "],["example-with-fish-data-from-sers.html", "1 Example with fish data from SERS 1.1 Plotting data on a map 1.2 Temporal summary 1.3 Species summary 1.4 Spatial biodiversity analysis", " 1 Example with fish data from SERS In this example we are interested in exploring data from a specific data resource  Swedish Electrofishing Registry - SERS (Institutionen f√∂r akvatiska resurser, SLU). This data base has 2.8 M observations starting in the 1950s. As you may already know, SBDI is a collection of many biodiversity databases. We start by searching for the data resource we are interested in using the function pick_filter(). This is an interactive query guiding you through the many resources available to filtering your query (data resources, spatial layers, and curated species lists). library(SBDI4R) fq_str &lt;- pick_filter(&quot;resource&quot;) # follow the instructions Follow the instruction. Your choices here would have been in3 &gt; dr10. Your variable fq_str will now contain a string data_resource_uid:dr10. But we are not interested in the complete database, but on the last 10 years of data. for this we concatenate (add to a vector) another filter string. These will be treated as AND factors. y1 &lt;- 2008 y2 &lt;- 2012 fq_str &lt;- c(fq_str, paste0(&quot;year:[&quot;, y1, &quot; TO &quot;, y2,&quot;]&quot;)) # Note the square brackets are hard limits For references on how to use the filters see SBDI APIS documentation. Using the function occurrences() we can the query for the observations fulfilling our filter. If you havent specified that in the sbdi_config() before, you need to pass your email and the download reason. library(SBDI4R) xf &lt;- occurrences(fq = fq_str, email = &quot;sbdi4r-test@biodiversitydata.se&quot;, download_reason_id = 10) ## Registered S3 methods overwritten by &#39;ALA4R&#39;: ## method from ## subset.occurrences SBDI4R ## summary.occurrences SBDI4R ## unique.occurrences SBDI4R # Simply summarise all records by data source table(xf$data$dataResourceName) ## ## SLU Aqua Institute of Freshwater Research Swedish Electrofishing Registry - SERS ## 95082 table(xf$data$dataResourceID) ## ## dr10 ## 95082 1.1 Plotting data on a map You can quickly plot all the observations as a PDF file with the function ocurrence_plot(), one page per species: occurrences_plot(xf, &quot;obsPlot.pdf&quot;, grouped=FALSE, taxon_level=&quot;species&quot;, pch=&#39;+&#39;) Note that the plot is saved to a pdf file in the current working directory. You can find that with getwd(). 1.1.0.1 Leaflet There are many other ways of producing spatial plots in R. The leaflet package provides a simple method of producing browser-based maps with panning, zooming, and background layers: library(leaflet) # drop any records with missing lat/lon values xfl &lt;- xf$data[!is.na(xf$data$longitude) | !is.na(xf$data$latitude),] marker_colour &lt;- rep(&quot;#d95f02&quot;, nrow(xfl)) # blank map, with imagery background leaflet(width = &quot;100%&quot;) %&gt;% addProviderTiles(&quot;Esri.WorldImagery&quot;) %&gt;% # add markers addCircleMarkers(xfl$longitude, xfl$latitude, radius = 1, fillOpacity =.5, opacity = 1, col=marker_colour, clusterOptions = markerClusterOptions()) 1.2 Temporal summary A quick summary over the years reveal a drop in number of records over time. table(xf$data$year) ## ## 2008 2009 2010 2011 2012 ## 18168 19674 20055 17188 19997 hist(xf$data$year, breaks = seq(y1, y2), xlab = &quot;Year&quot;, main = &quot;&quot;) 1.3 Species summary In the same way we can summaries the number of observations for each species, by common or scientific name. sppTab &lt;- table(xf$data$commonName) sppDF &lt;- as.data.frame(sppTab) colnames(sppDF)[1] &lt;- &quot;species&quot; head(sppDF) ## species Freq ## 1 66 ## 2 Alpine bullhead 4615 ## 3 American burbot 7081 ## 4 Aral asp 6 ## 5 Arctic char 46 ## 6 aurora trout 856 sppTab &lt;- table(xf$data$scientificName) sppDF &lt;- as.data.frame(sppTab) colnames(sppDF)[1] &lt;- &quot;species&quot; head(sppDF) ## species Freq ## 1 Abramis brama (Linnaeus, 1758) 61 ## 2 Alburnus alburnus (Linnaeus, 1758) 660 ## 3 Anguilla anguilla (Linnaeus, 1758) 2140 ## 4 Astacidae 100 ## 5 Astacus astacus (Linnaeus, 1758) 618 ## 6 Barbatula barbatula (Linnaeus, 1758) 620 Perhaps, you need to send this table as a .CSV file to a colleague. write.csv(sppDF, &quot;SERS_species_summary.csv&quot;) # NOTE: again this will be saved on your working directory 1.4 Spatial biodiversity analysis Lets now ask: how does the species richness vary across Sweden? In this case we want to summarise occurrences species-wise over a defined grid instead of plotting every observation point. First we need to overlay the observations with a grid. In this case, the standard Swedish grids at 50, 25, 10 and 5 km are provided as data in the SBDI4R package (with Coordinate Reference System = WGS84, EPSG:4326). library(sp) # the function coordinates() and proj4string() are in sp ## Warning: package &#39;sp&#39; was built under R version 4.0.3 library(rgeos) # the function over() is in package rgeos ## rgeos version: 0.5-5, (SVN revision 640) ## GEOS runtime version: 3.8.0-CAPI-1.13.1 ## Linking to sp version: 1.4-2 ## Polygon checking: TRUE # load some shapes over Sweden&#39;s political borders data(&quot;swe_wgs84&quot;, package=&quot;SBDI4R&quot;, envir=environment()) # A standard 50km grid data(&quot;Sweden_Grid_50km_Wgs84&quot;, package=&quot;SBDI4R&quot;, envir=environment()) grid &lt;- Sweden_Grid_50km_Wgs84 # make the observations spatial # NOTE: make sure there are no NAs on either column defining the coordinates # xf$data[!is.na(xf$data$longitude) | !is.na(xf$data$latitude),] obs &lt;- as.data.frame(xf$data) coordinates(obs) &lt;- obs[,c(&quot;longitude&quot;,&quot;latitude&quot;)] wkt &lt;- sf::st_crs(4326)[[2]] proj4string(obs) &lt;- sp::CRS(wkt) #CRS(&quot;+init=epsg:4326&quot;) nObs &lt;- nrow(obs) # overlay the data with the grid ObsInGridList &lt;- over(grid, obs, returnList=TRUE) wNonEmpty &lt;- unname( which( unlist(lapply(ObsInGridList, nrow)) != 0) ) if(length(wNonEmpty)==0) message(&quot;Observations don&#39;t overlap any grid cell.&quot;) The result ObsInGridList is a list object with a subset of the data on each grid. Now summarise occurrences within grid cells: # check n the total number of observations sum(unlist(lapply(ObsInGridList, nrow))) ## [1] 95082 # apply a summary over the grid cells nCells &lt;- length(ObsInGridList) res &lt;- data.frame(&quot;nObs&quot;=as.numeric(rep(NA,nCells)), &quot;nYears&quot;=as.numeric(rep(NA,nCells)), &quot;nSpp&quot;=as.numeric(rep(NA,nCells)), row.names = row.names(grid), stringsAsFactors = FALSE) cols2use &lt;- c(&quot;scientificName&quot;, &quot;year&quot;) dataRes &lt;- lapply(ObsInGridList[wNonEmpty], function(x){ x &lt;- x[,cols2use] colnames(x) &lt;- c(&quot;scientificName&quot;, &quot;year&quot;) return(c(&quot;nObs&quot; = length(x[,&quot;scientificName&quot;]), &quot;nYears&quot; = length(unique(x[,&quot;year&quot;])), &quot;nSpp&quot; = length(unique(x[,&quot;scientificName&quot;])) ) ) } ) dataRes &lt;- as.data.frame(dplyr::bind_rows(dataRes, .id = &quot;gridID&quot;)) res[wNonEmpty,] &lt;- dataRes[,-1] resSp &lt;- sp::SpatialPolygonsDataFrame(grid, res) And finally plot the grid summary as a map: palBW &lt;- leaflet::colorNumeric(c(&quot;white&quot;, &quot;navyblue&quot;), c(0, max(resSp@data$nSpp, na.rm = TRUE)), na.color = &quot;transparent&quot;) oldpar &lt;- par() par(mar = c(1,1,0,0)) plot(resSp, col=palBW(resSp@data$nSpp), border = NA) plot(swe_wgs84$Border, border=1, lwd=1, add=T) legend(&quot;bottomleft&quot;, legend = round(seq(0, max(resSp@data$nSpp, na.rm = TRUE), length.out = 5)), col = palBW(seq(0, max(resSp@data$nSpp, na.rm = TRUE), length.out = 5)), title = &quot;Number of \\nspecies&quot;, pch = 15, bty=&quot;n&quot;) suppressWarnings(par(oldpar)) We can go further by gathering the observations by latitude. library(dplyr) library(tidyr) xgridded &lt;- xf$data %&gt;% ## discard genus- and higher-level records filter(rank %in% c(&quot;species&quot;, &quot;subspecies&quot;, &quot;variety&quot;, &quot;form&quot;, &quot;cultivar&quot;)) %&gt;% mutate(longitude = round(longitude * 4)/4, latitude = round(latitude * 4)/4) %&gt;% group_by(longitude,latitude) %&gt;% ## subset to vars of interest select(longitude, latitude, species) %&gt;% ## take one row per cell per species (presence) distinct() %&gt;% ## calculate species richness mutate(richness=n()) %&gt;% ## convert to wide format (sites by species) mutate(present=1) %&gt;% do(tidyr::pivot_wider(data=., names_from=species, values_from=present, values_fill=0)) %&gt;% ungroup() ## where a species was not present, it will have NA: convert these to 0 sppcols &lt;- setdiff(names(xgridded), c(&quot;longitude&quot;, &quot;latitude&quot;, &quot;richness&quot;)) xgridded &lt;- xgridded %&gt;% mutate_at(sppcols, function(z) ifelse(is.na(z), 0, z)) And plot it accordingly library(ggplot2) ggplot(xgridded, aes(latitude, richness)) + labs(x = &quot;Latitude (¬∫)&quot;, y = &quot;Species richness&quot;) + lims(y = c(0,20)) + geom_point() + theme_bw() "],["example-with-opportunistic-data-on-dragonflies.html", "2 Example with opportunistic data on Dragonflies 2.1 Name searching 2.2 Get the observations, filter the search, get quality assertions, plotting data on a map and save data", " 2 Example with opportunistic data on Dragonflies In this example we are interested in exploring opportunistically collected data from the Swedish citizen science observation data portal - Artportalen. 2.1 Name searching To begin, we want be sure there is an unequivocal way to find the species within the order Odonata and nothing else, so lets search for it: library(SBDI4R) sx &lt;- search_fulltext(&quot;odonata&quot;) ## [1] &quot;https://species.biodiversitydata.se/ws/search.json?q=odonata&amp;fq=idxtype%3ATAXON&quot; sx ## Search metadata: ## totalRecords queryTitle ## 1 5 odonata ## ## Facet results: ## [1] &quot;NULL&quot; ## ## Search results: ## name commonNameSingle rank ## 1 &quot;Odonata associated gemycircularvirus 1&quot; &quot;&quot; &quot;species&quot; ## 2 &quot;Odonata associated gemycircularvirus 2&quot; &quot;&quot; &quot;species&quot; ## 3 &quot;Bdellodes odonata Wallace &amp; Mahon, 1976&quot; &quot;&quot; &quot;species&quot; ## 4 &quot;Odonata&quot; &quot;&quot; &quot;order&quot; ## 5 &quot;Ramalina fastigiata var. odonata Hue&quot; &quot;&quot; &quot;variety&quot; ## guid ## 1 &quot;9829523&quot; ## 2 &quot;10072832&quot; ## 3 &quot;8062407&quot; ## 4 &quot;789&quot; ## 5 &quot;7367071&quot; we see there that other taxonomic definitions appear too, but only one order. Lets refine the search. To know the names of the search fields (that may not be the same as returned column names) we can use the function sbdi_fields(fields_type = \"general\"). The search field we are looking for is order_s. sx &lt;- search_fulltext(fq=&quot;order_s:Odonata&quot;, page_size = 10) ## [1] &quot;https://species.biodiversitydata.se/ws/search.json?fq=order_s%3AOdonata&amp;fq=idxtype%3ATAXON&amp;pageSize=10&quot; sx$data[,c( &quot;name&quot;,&quot;scientificName&quot;, &quot;guid&quot;, &quot;rank&quot;)] ## name ## 1 Gomphomacromia Brauer, 1864 ## 2 Austropetalia Tillyard, 1916 ## 3 Sogjutella Pritykina, 1980 ## 4 Neuragrion Karsch, 1891 ## 5 Xamenophlebia Pritykina, 1981 ## 6 Lauromacromia Geijskes, 1970 ## 7 Sympetrum Newman, 1833 ## 8 Corduliochlora Marinov &amp; Seidenbusch, 2007 ## 9 Torrenticnemis Lieftinck, 1949 ## 10 Cyanallagma Kennedy, 1920 ## scientificName guid rank ## 1 Gomphomacromia Brauer, 1864 1429753 genus ## 2 Austropetalia Tillyard, 1916 1426725 genus ## 3 Sogjutella Pritykina, 1980 4799335 genus ## 4 Neuragrion Karsch, 1891 4302686 genus ## 5 Xamenophlebia Pritykina, 1981 4799353 genus ## 6 Lauromacromia Geijskes, 1970 1429769 genus ## 7 Sympetrum Newman, 1833 1428195 genus ## 8 Corduliochlora Marinov &amp; Seidenbusch, 2007 4798599 genus ## 9 Torrenticnemis Lieftinck, 1949 1423625 genus ## 10 Cyanallagma Kennedy, 1920 1423468 genus Now we can download the taxonomic data (note that the search is case-sensitive): tx &lt;- taxinfo_download(&quot;order_s:Odonata&quot;, fields = c(&quot;guid&quot;, &quot;order_s&quot;,&quot;genus_s&quot;, &quot;specificEpithet_s&quot;, &quot;scientificName&quot;, &quot;canonicalName_s&quot;, &quot;rank&quot;), verbose = FALSE) tx &lt;- tx[tx$rank == &quot;species&quot; &amp; tx$genusS != &quot;&quot;,] ## restrict to species and not hybrids Now tx is our complete species list. 2.2 Get the observations, filter the search, get quality assertions, plotting data on a map and save data As usual we start by searching for the data resource we are interested in using the function pick_filter(). This is an interactive query guiding you through the many resources available to filtering your query (data resources, spatial layers, and curated species lists). library(SBDI4R) fq_str &lt;- pick_filter(&quot;resource&quot;) # follow the instructions Follow the instruction. Your choices here would have been in3 &gt; dr5. Your variable fq_str will now contain a string data_resource_uid:dr5. We only need data from 2000 to 2010 y1 &lt;- 2000 y2 &lt;- 2010 fq_str &lt;- c(fq_str, paste0(&quot;year:[&quot;, y1, &quot; TO &quot;, y2,&quot;]&quot;)) # Note the square brackets are hard limits Select data  get records for Southern Sweden (G√∂taland). Vector spatial layers (eg. polygons) can be imported in a number of different ways. SBDI APIs take as search input polygons in the s.k. WKT Well Known Text format. So the first step is to load a vector layer and transform it into a WKT string. You could instead use the data we kindly provided in the SBDI4R package data(\"swe\"). data(&quot;swe&quot;) wGotaland &lt;- swe$Counties$LnNamn %in% c(&quot;Blekinge&quot;, &quot;Gotlands&quot;, &quot;Hallands&quot;, &quot;J√∂nk√∂pings&quot;, &quot;Kalmar&quot;, &quot;Kronobergs&quot;, &quot;√ñsterg√∂tlands&quot;, &quot;Sk√•ne&quot;, &quot;V√§stra G√∂talands&quot;) gotaland_c &lt;- swe$Counties[wGotaland,] We could create the WKT string using the rgeos library: library(rgeos) wkt &lt;- writeWKT(gotaland_c) Unfortunately, in this instance this gives a WKT string that is too long and wont be accepted by the web service. Also, the shapefile we just got is projected in the coordinate system SWEREF99 TM, and the web service only accepts coordinates in a geodesic coordinate system WGS84. Instead, lets construct the WKT string directly, which gives us a little more control over its format: gotaland_c &lt;- sf::as_Spatial( sf::st_transform( sf::st_as_sf(gotaland_c), crs = sf::st_crs(4326)$wkt) ) gotaland &lt;- rgeos::gUnaryUnion(gotaland_c) # extract the polygons coordinates nPol &lt;- length(gotaland@polygons[[1]]@Polygons) lonlat &lt;- list() for(p in seq(nPol)){ lonlat[[p]] &lt;- gotaland@polygons[[1]]@Polygons[[p]]@coords } lonlat &lt;- do.call(rbind, lonlat) # create a convex hull of the polygon to reduce the length of the WKT string gotaland_ch &lt;- chull(lonlat) lonlat &lt;- lonlat[c(gotaland_ch, gotaland_ch[1]), ] # create WKT string # first join each lon-lat coordinate pair wkt_temp &lt;- apply(lonlat, 1, function(z) paste(round(z,4), collapse=&quot; &quot;)) # now build the WKT string wkt &lt;- paste(&quot;MULTIPOLYGON(((&quot;, paste(wkt_temp, collapse=&quot;,&quot;), &quot;)))&quot;, sep=&quot;&quot;) # NOTE: as of today, the SBDI APIs will only work properly if the polygon is # submitted as a MULTIPOLYGON sbdi_fields(&quot;occurrence&quot;)[,1:2] ## name dataType ## 1 abcd_identification_qualifier string ## 2 access_rights string ## 3 assertions string ## 4 assertions_missing string ## 5 assertions_passed string ## 6 assertions_unchecked string ## 7 basis_of_record string ## 8 behavior string ## 9 bibliographic_citation string ## 10 catalogue_number string ## 11 cl10038 string ## 12 cl10040 string ## 13 cl10041 string ## 14 cl10042 string ## 15 cl10046 string ## 16 cl10047 string ## 17 cl10048 string ## 18 cl10050 string ## 19 cl10051 string ## 20 cl10052 string ## 21 cl10053 string ## 22 cl10054 string ## 23 cl10055 string ## 24 cl10057 string ## 25 cl10058 string ## 26 cl10059 string ## 27 cl10061 string ## 28 cl10063 string ## 29 cl10064 string ## 30 cl10065 string ## 31 cl10066 string ## 32 cl10067 string ## 33 cl10068 string ## 34 cl10070 string ## 35 cl10071 string ## 36 cl10073 string ## 37 cl10074 string ## 38 cl10082 string ## 39 cl10083 string ## 40 cl10084 string ## 41 cl10087 string ## 42 cl10089 string ## 43 cl10090 string ## 44 cl10097 string ## 45 cl10101 string ## 46 cl10102 string ## 47 cl10104 string ## 48 class string ## 49 class_id string ## 50 collection_code string ## 51 collection_id string ## 52 collection_name string ## 53 collection_uid string ## 54 collector string ## 55 common_name string ## 56 common_name_and_lsid string ## 57 coordinate_uncertainty tdouble ## 58 country string ## 59 country_code string ## 60 county string ## 61 data_provider string ## 62 data_provider_uid string ## 63 data_resource string ## 64 data_resource_uid string ## 65 dataset_id string ## 66 dataset_name string ## 67 date_precision string ## 68 datum string ## 69 day string ## 70 disposition string ## 71 dynamic_properties string ## 72 el10000 tfloat ## 73 el10001 tfloat ## 74 el10002 tfloat ## 75 el10003 tfloat ## 76 el10004 tfloat ## 77 el10005 tfloat ## 78 el10006 tfloat ## 79 el10007 tfloat ## 80 el10008 tfloat ## 81 el10009 tfloat ## 82 el10010 tfloat ## 83 el10011 tfloat ## 84 el10012 tfloat ## 85 el10013 tfloat ## 86 el10014 tfloat ## 87 el10015 tfloat ## 88 el10016 tfloat ## 89 el10017 tfloat ## 90 el10018 tfloat ## 91 el10019 tfloat ## 92 el10020 tfloat ## 93 el10021 tfloat ## 94 el10022 tfloat ## 95 el10023 tfloat ## 96 el10024 tfloat ## 97 el10025 tfloat ## 98 el10026 tfloat ## 99 el10027 tfloat ## 100 el10028 tfloat ## 101 el10029 tfloat ## 102 el10030 tfloat ## 103 el10031 tfloat ## 104 el10032 tfloat ## 105 el10033 tfloat ## 106 el10034 tfloat ## 107 el10035 tfloat ## 108 el10036 tfloat ## 109 el10044 tfloat ## 110 elevation double ## 111 end_day_of_year string ## 112 establishment_means string ## 113 event_id string ## 114 event_remarks string ## 115 event_time string ## 116 family string ## 117 family_id string ## 118 field_number string ## 119 first_loaded_date tdate ## 120 genus string ## 121 genus_guid string ## 122 georeference_remarks string ## 123 georeferenced_by string ## 124 georeferenced_date string ## 125 geospatial_kosher string ## 126 habitat string ## 127 higher_classification string ## 128 higher_geography string ## 129 id string ## 130 identification_qualifier string ## 131 identification_remarks string ## 132 identified_by string ## 133 identified_date tdate ## 134 individual_count string ## 135 infraspecific_epithet string ## 136 institution_code string ## 137 institution_name string ## 138 institution_uid string ## 139 island string ## 140 island_group string ## 141 kingdom string ## 142 kingdom_id string ## 143 language string ## 144 last_load_date tdate ## 145 last_processed_date tdate ## 146 lat_long string ## 147 latitude tdouble ## 149 license string ## 150 location_according_to string ## 151 location_id string ## 152 location_remarks string ## 153 longitude tdouble ## 154 mappable string ## 155 max_depth_d tdouble ## 156 max_elevation_d tdouble ## 157 min_depth_d tdouble ## 158 min_elevation_d tdouble ## 159 min_elevation_d_rng tdouble ## 160 modified_date tdate ## 161 month string ## 162 multimedia string ## 163 municipality string ## 164 name_match_metric string ## 165 name_parse_type string ## 166 names_and_lsid string ## 167 occurrence_date tdate ## 168 occurrence_date_end_dt tdate ## 169 occurrence_decade_i tint ## 170 occurrence_id string ## 171 occurrence_remarks string ## 172 occurrence_status string ## 173 occurrence_year tdate ## 174 order string ## 175 order_id string ## 176 organism_quantity string ## 177 organism_quantity_type string ## 178 original_name_usage string ## 179 other_catalog_numbers string ## 180 outlier_layer_count tint ## 181 owner_institution_code string ## 182 phylum string ## 183 phylum_id string ## 184 point-0.0001 string ## 185 point-0.001 string ## 186 point-0.01 string ## 187 point-0.02 string ## 188 point-0.1 string ## 189 point-1 string ## 190 preparations string ## 191 previous_identifications string ## 192 provenance string ## 193 rank string ## 194 rank_id tint ## 195 raw_associated_references string ## 196 raw_basis_of_record string ## 197 raw_class string ## 198 raw_common_name string ## 199 raw_continent string ## 200 raw_coordinate_precision string ## 201 raw_coordinate_uncertainty string ## 202 raw_country string ## 203 raw_datum string ## 204 raw_day string ## 205 raw_establishment_means string ## 206 raw_family string ## 207 raw_genus string ## 208 raw_georeference_remarks string ## 209 raw_georeferenced_by string ## 210 raw_georeferenced_date string ## 211 raw_habitat string ## 212 raw_identification_qualifier string ## 213 raw_identified_date string ## 214 raw_information_withheld string ## 215 raw_institution_id string ## 216 raw_kingdom string ## 217 raw_latitude string ## 218 raw_license string ## 219 raw_life_stage string ## 220 raw_locality string ## 221 raw_longitude string ## 222 raw_max_depth string ## 223 raw_max_elevation string ## 224 raw_min_depth string ## 225 raw_min_elevation string ## 226 raw_modified_date string ## 227 raw_month string ## 228 raw_name textgen ## 229 raw_nomenclatural_code string ## 230 raw_occurrence_date string ## 231 raw_occurrence_status string ## 232 raw_occurrence_year string ## 233 raw_order string ## 234 raw_phylum string ## 235 raw_rank string ## 236 raw_sampling_protocol string ## 237 raw_sex string ## 238 raw_state string ## 239 raw_taxon_name string ## 240 raw_type_status string ## 241 raw_verbatim_depth string ## 242 raw_verbatim_elevation string ## 243 record_number string ## 245 rightsholder string ## 246 sampling_effort string ## 247 scientific_name_authorship string ## 248 scientific_name_id string ## 249 sensitive string ## 250 species string ## 251 species_group string ## 252 species_guid string ## 253 species_subgroup string ## 254 specific_epithet string ## 255 start_day_of_year string ## 256 state string ## 257 subgenus string ## 258 subspecies string ## 259 subspecies_guid string ## 260 subspecies_id string ## 261 subspecies_name string ## 262 suitable_modelling string ## 263 system_assertions string ## 264 taxon_concept_lsid string ## 265 taxon_id string ## 266 taxon_name string ## 267 taxon_remarks string ## 268 taxonomic_issue string ## 269 taxonomic_kosher string ## 270 type_status string ## 271 verbatim_coordinate_system string ## 272 verbatim_coordinates string ## 273 verbatim_event_date string ## 274 verbatim_latitude string ## 275 verbatim_locality string ## 276 verbatim_longitude string ## 277 verbatim_srs string ## 278 verbatim_taxon_rank string ## 279 water_body string ## 280 year int xf &lt;- SBDI4R::occurrences(taxon = &quot;order:Odonata&quot;, fq = fq_str, wkt = wkt, extra = &quot;collector&quot;, email = &quot;sbdi4r-test@biodiversitydata.se&quot;, download_reason_id = 10) xf$meta ## UID Name ## 1 dp0 IPT GBIF Sweden ## 2 dr5 Artportalen (Swedish Species Observation System) ## 3 co3 Artportalen - The Swedish Species Observation System ## 4 in3 The Swedish University of Agricultural Sciences ## DOI ## 1 ## 2 doi.org/10.15468/kllkyl ## 3 ## 4 ## Citation ## 1 Records provided by IPT GBIF Sweden, accessed through ALA website. ## 2 Artportalen (Swedish Species Observation System). ArtDatabanken. Dataset/Occurrence. http://www.gbif.se/ipt/resource?r=artdata ## 3 Records provided by Artportalen - The Swedish Species Observation System, accessed through ALA website. ## 4 Records provided by The Swedish University of Agricultural Sciences, accessed through ALA website. ## Rights ## 1 ## 2 Public Domain (CC0) To the extent possible under law, the publisher has waived all rights to these data and has dedicated them to the Public Domain (CC0 1.0). Users may copy, modify, distribute and use the work, including for commercial purposes, without restriction. ## 3 ## 4 ## More.Information ## 1 For more information: https://collections.biodiversitydata.se/public/show/dp0 ## 2 For more information: https://collections.biodiversitydata.se/public/show/dr5 ## 3 For more information: https://collections.biodiversitydata.se/public/show/co3 ## 4 For more information: https://collections.biodiversitydata.se/public/show/in3 ## Data.generalisations Information.withheld Download.limit ## 1 NA NA NA ## 2 NA NA NA ## 3 NA NA NA ## 4 NA NA NA ## Number.of.Records.in.Download ## 1 27290 ## 2 31779 ## 3 26744 ## 4 26744 but before we can use the observation records we need to know how the observation effort has varied over time and in space. For this we define field visits i.e. occasions at which an observer has sampled observations  if we have information on observer id, location id and date we can aggregate data into field visits. We do this using BIRDS, and 25km grid: library(BIRDS) ## Warning: package &#39;BIRDS&#39; was built under R version 4.0.5 ## ## Attaching package: &#39;BIRDS&#39; ## The following object is masked _by_ &#39;.GlobalEnv&#39;: ## ## gotaland OB &lt;- organiseBirds(xf$data, sppCol = &quot;species&quot; , taxonRankCol = &quot;rank&quot;, taxonRank = &quot;species&quot;, idCols = c(&quot;locality&quot;, &quot;collector&quot;), timeCols = c(&quot;year&quot;, &quot;month&quot;, &quot;day&quot;), xyCols =c(&quot;longitude&quot;,&quot;latitude&quot;) ) ## 252 observations did not match with the specified taxon rank and were removed. gotaland_grid25 &lt;- raster::intersect(gotaland, Sweden_Grid_25km_Wgs84) # gotaland_grid25 &lt;- gIntersection(spTransform(Sweden_Grid_25km_Wgs84, # CRSobj = CRS(sf::st_crs(4326)$wkt)), # gotaland, # byid = TRUE) SB &lt;- summariseBirds(OB, grid = gotaland_grid25, spillOver = &quot;unique&quot;) ## 1664 observations did not overlap with the grid and will be discarded. ## 0.009 % of the visits spill over neighbouring grid cells. maxC &lt;- max(SB$spatial@data$nObs, na.rm = TRUE) palBW &lt;- leaflet::colorNumeric(c(&quot;white&quot;, &quot;navyblue&quot;), c(0, maxC), na.color = &quot;transparent&quot;) oldpar &lt;- par() par(mar = c(4,0,4,0), mfrow=c(1,3)) plot(SB$spatial, col=palBW(SB$spatial@data$nObs), border = &quot;grey&quot;, main=&quot;All years&quot;) ## with palette legend(&quot;topleft&quot;, inset = c(0,0.05), legend = round(seq(0, maxC, length.out = 5)), col = palBW(seq(0, maxC, length.out = 5)), title = &quot;Number of \\nobservations&quot;, pch = 15, bty=&quot;n&quot;) ## or export other combinations, e.g. one map per observed year yearlySp &lt;- exportBirds(SB, dimension = &quot;spatial&quot;, timeRes = &quot;yearly&quot;, variable = &quot;nObs&quot;, method = &quot;sum&quot;) maxC &lt;- max(yearlySp@data$&#39;2005&#39;, na.rm = TRUE) palBW &lt;- leaflet::colorNumeric(c(&quot;white&quot;, &quot;navyblue&quot;), c(0, maxC), na.color = &quot;transparent&quot;) plot(yearlySp[&quot;2005&quot;], col=palBW(yearlySp@data$&#39;2005&#39;), border = &quot;grey&quot;,main=&quot;2005&quot;) legend(&quot;topleft&quot;, inset = c(0,0.05), legend = round(seq(0, maxC, length.out = 5)), col = palBW(seq(0, maxC, length.out = 5)), border = &quot;grey&quot;, title = &quot;Number of \\nobservations&quot;, pch = 15, bty=&quot;n&quot;) maxC &lt;- max(yearlySp@data$&#39;2010&#39;, na.rm = TRUE) palBW &lt;- leaflet::colorNumeric(c(&quot;white&quot;, &quot;navyblue&quot;), c(0, maxC), na.color = &quot;transparent&quot;) plot(yearlySp[&quot;2010&quot;], col=palBW(yearlySp@data$&#39;2010&#39;), border = &quot;grey&quot;,main=&quot;2010&quot;) legend(&quot;topleft&quot;, inset = c(0,0.05), legend = round(seq(0, maxC, length.out = 5)), col = palBW(seq(0, maxC, length.out = 5)), border = &quot;grey&quot;, title = &quot;Number of \\nobservations&quot;, pch = 15, bty=&quot;n&quot;) suppressWarnings(par(oldpar)) library(sf) ## Warning: package &#39;sf&#39; was built under R version 4.0.5 ## Linking to GEOS 3.9.0, GDAL 3.2.1, PROJ 7.2.1 library(cowplot) ## Warning: package &#39;cowplot&#39; was built under R version 4.0.3 library(ggplot2) library(colorRamps) ## Warning: package &#39;colorRamps&#39; was built under R version 4.0.3 spatial_sf &lt;- st_as_sf(SB$spatial) obs &lt;- ggplot(data = spatial_sf, aes( fill = nVis))+ geom_sf()+ ggtitle(&quot;Visits&quot;)+ scale_fill_gradient(low = &quot;#56B1F7&quot;, high = &quot;#132B43&quot;, na.value = NA) + theme_cowplot() obs spp &lt;- ggplot(data = spatial_sf ,aes( fill = nSpp))+ geom_sf()+ ggtitle(&quot;Number of species&quot;)+ scale_fill_gradient(low = &quot;#56B1F7&quot;, high = &quot;#132B43&quot;, na.value = NA) + theme_cowplot() spp How has observation effort (frequency of visits) varied over time and space?  1) show maps as in Example 7 (all years, year 2000, 2002, 2004, 2006, 2008, 2010), 2 make also a time line plot with no. visits against years, no. of gridcells with visits against years. we see that SB contains an element called SB$temporal that contains a daily time series with time specific rows when there is information. xts also supports time, but dating below day resolution is not yet implemented in the BIRDS package. sb.xts &lt;- SB$temporal head(sb.xts) ## nObs nVis nSpp ## 2000-03-24 1 1 1 ## 2000-04-05 4 3 3 ## 2000-04-06 11 6 3 ## 2000-04-10 1 1 1 ## 2000-04-12 3 3 1 ## 2000-04-13 8 5 2 dim(sb.xts) ## [1] 1118 3 Sub-setting is convenient in xts as you can do it with its dates and with a / for a range of dates. sb.xts[&quot;2010-09&quot;] #a specific month ## nObs nVis nSpp ## 2010-09-01 38 15 14 ## 2010-09-02 26 12 12 ## 2010-09-03 20 9 10 ## 2010-09-04 63 19 18 ## 2010-09-05 71 25 12 ## 2010-09-06 16 4 9 ## 2010-09-07 9 7 5 ## 2010-09-08 13 6 8 ## 2010-09-09 32 12 14 ## 2010-09-10 1 1 1 ## 2010-09-11 15 8 8 ## 2010-09-12 15 7 8 ## 2010-09-13 14 5 9 ## 2010-09-14 1 1 1 ## 2010-09-15 3 3 2 ## 2010-09-17 3 2 3 ## 2010-09-18 9 5 5 ## 2010-09-19 12 7 5 ## 2010-09-21 3 2 3 ## 2010-09-22 4 4 2 ## 2010-09-23 3 3 2 ## 2010-09-24 10 5 5 ## 2010-09-25 6 3 6 ## 2010-09-26 7 6 2 ## 2010-09-28 2 2 2 ## 2010-09-29 5 3 4 ## 2010-09-30 2 2 2 sb.xts[&quot;2010-09-07&quot;] #a specific day ## nObs nVis nSpp ## 2010-09-07 9 7 5 sb.xts[&quot;2007-01-01/2007-05-01&quot;] #for a period ## nObs nVis nSpp ## 2007-03-05 1 1 1 ## 2007-03-14 1 1 1 ## 2007-03-20 4 4 4 ## 2007-04-02 7 4 4 ## 2007-04-11 14 7 3 ## 2007-04-12 8 6 4 ## 2007-04-13 1 1 1 ## 2007-04-15 1 1 1 ## 2007-04-17 6 4 3 ## 2007-04-18 1 1 1 ## 2007-04-21 1 1 1 ## 2007-04-23 1 1 1 ## 2007-04-27 11 6 4 ## 2007-04-28 4 4 3 ## 2007-04-30 2 2 2 The package xts has several tools for converting to different periods. Here we will use to.monthly. This provides, the first, min, max, and last of the data. We can plot the daily maximum number of observations. The plot command with an xts object provides a TON of features. This makes it fairly easy to customize your plots. Read more in ?plot.xts. library(xts) obs.m &lt;- to.monthly(sb.xts$nObs) obs.m[&quot;2007-04&quot;] ## sb.xts$nObs.Open sb.xts$nObs.High sb.xts$nObs.Low sb.xts$nObs.Close ## Apr 2007 7 14 1 2 sb.xts[&quot;2007-04&quot;] ## nObs nVis nSpp ## 2007-04-02 7 4 4 ## 2007-04-11 14 7 3 ## 2007-04-12 8 6 4 ## 2007-04-13 1 1 1 ## 2007-04-15 1 1 1 ## 2007-04-17 6 4 3 ## 2007-04-18 1 1 1 ## 2007-04-21 1 1 1 ## 2007-04-23 1 1 1 ## 2007-04-27 11 6 4 ## 2007-04-28 4 4 3 ## 2007-04-30 2 2 2 plot(obs.m[&quot;2000/2010&quot;,2], col = &quot;darkblue&quot;, grid.ticks.on = &quot;month&quot;, major.ticks = &quot;month&quot;, grid.col = &quot;lightgrey&quot;, main = &quot;Maximum number of daily observations per month&quot;) vis.m &lt;- to.monthly(sb.xts$nVis) vis.m[&quot;2007-04&quot;] ## sb.xts$nVis.Open sb.xts$nVis.High sb.xts$nVis.Low sb.xts$nVis.Close ## Apr 2007 4 7 1 2 sb.xts[&quot;2007-04&quot;] ## nObs nVis nSpp ## 2007-04-02 7 4 4 ## 2007-04-11 14 7 3 ## 2007-04-12 8 6 4 ## 2007-04-13 1 1 1 ## 2007-04-15 1 1 1 ## 2007-04-17 6 4 3 ## 2007-04-18 1 1 1 ## 2007-04-21 1 1 1 ## 2007-04-23 1 1 1 ## 2007-04-27 11 6 4 ## 2007-04-28 4 4 3 ## 2007-04-30 2 2 2 plot(vis.m[&quot;2000/2010&quot;,2], col = &quot;darkblue&quot;, grid.ticks.on = &quot;month&quot;, major.ticks = &quot;month&quot;, grid.col = &quot;lightgrey&quot;, main = &quot;Maximum number of daily visits per month&quot;) We can now look at some particular species and ask whether this has changed in occurrence over time: Plot no. records of species x and no. visits all species over years (we simply explore by comparing records for a species with no visits, can assume that species has increased of stronger positive trend than for no. visits) Plot no. gridcells with visits for species x and no. gridcells with visits for all species over years (we simply explore by comparing records for a species with no visits, can assume that species has increased of stronger positive trend than for no. visits) (species x: Tv√•fl√§ckad trollsl√§nda Epitheca bimaculata) "]]
